
GO
/****** Object:  Schema [adm]    Script Date: 7/26/2023 10:54:30 AM ******/
CREATE SCHEMA [adm]
GO
/****** Object:  Schema [bbk]    Script Date: 7/26/2023 10:54:30 AM ******/
CREATE SCHEMA [bbk]
GO
/****** Object:  Schema [dnr]    Script Date: 7/26/2023 10:54:30 AM ******/
CREATE SCHEMA [dnr]
GO
/****** Object:  Schema [dsh]    Script Date: 7/26/2023 10:54:30 AM ******/
CREATE SCHEMA [dsh]
GO
/****** Object:  UserDefinedFunction [adm].[GetServerDate]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create function [adm].[GetServerDate]
()
Returns Datetime
As
Begin

	
	DECLARE @RetValue datetime = GETDATE()
	DECLARE @HourValue float = 0
	
	--select @HourValue = SettingValue from sys_Settings WHERE SettingName = 'LocalTimeZone'

	DECLARE @MinValue int = 0
	SET @MinValue = @HourValue * 60
	SET @RetValue = DATEADD(MINUTE,@MinValue,@RetValue)

	return @RetValue

End
GO
/****** Object:  UserDefinedFunction [adm].[Varcharsplit]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create function [adm].[Varcharsplit]
(
@param nvarchar(max), 
@delimiter char(1)
)
returns @t table (val nvarchar(max), seq int)
as
begin
set @param += @delimiter

;with a as
(
select cast(1 as bigint) f, charindex(@delimiter, @param) t, 1 seq
union all
select t + 1, charindex(@delimiter, @param, t + 1), seq + 1
from a
where charindex(@delimiter, @param, t + 1) > 0
)
insert @t
select substring(@param, f, t - f), seq from a
option (maxrecursion 0)
return
end
GO
/****** Object:  Table [adm].[APIKey]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [adm].[APIKey](
	[KeyID] [varchar](50) NOT NULL,
	[KeyValue] [varchar](100) NULL,
	[KeyDetails] [varchar](100) NULL,
	[CreatedDate] [datetime] NULL,
	[ActiveStatus] [varchar](50) NULL,
 CONSTRAINT [PK_sys_APIKey] PRIMARY KEY CLUSTERED 
(
	[KeyID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [adm].[EmailSettings]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [adm].[EmailSettings](
	[EmailServer] [varchar](50) NOT NULL,
	[SenderName] [varchar](50) NULL,
	[WebURL] [varchar](500) NULL,
	[SenderEmail] [varchar](50) NULL,
	[UseAuthentication] [int] NULL,
	[SenderUsername] [varchar](50) NULL,
	[SenderPassword] [varchar](50) NULL,
	[PortNumber] [int] NULL,
	[UseSSL] [int] NULL,
 CONSTRAINT [PK_EmailSettings] PRIMARY KEY CLUSTERED 
(
	[EmailServer] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [adm].[NumberFormat]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [adm].[NumberFormat](
	[TableName] [varchar](50) NOT NULL,
	[Prefix] [varchar](50) NULL,
	[NumberPart] [bigint] NULL,
	[NumberLength] [int] NOT NULL,
 CONSTRAINT [PK_NumberConfiguration] PRIMARY KEY CLUSTERED 
(
	[TableName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [adm].[SystemUser]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [adm].[SystemUser](
	[UserID] [varchar](50) NOT NULL,
	[UserType] [varchar](50) NULL,
	[BloodBankCentreID] [varchar](50) NULL,
	[Username] [varchar](50) NULL,
	[Password] [varchar](100) NULL,
	[DisplayName] [varchar](100) NULL,
	[EmailAddress] [varchar](100) NULL,
	[ActiveStatus] [varchar](50) NULL,
 CONSTRAINT [PK_sys_User] PRIMARY KEY CLUSTERED 
(
	[UserID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [adm].[Token]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [adm].[Token](
	[TokenID] [varchar](50) NOT NULL,
	[TokenType] [varchar](50) NULL,
	[RefID] [varchar](50) NULL,
	[TokenData] [varchar](50) NULL,
	[CreatedDate] [datetime] NULL,
	[ExpiryDate] [datetime] NULL,
	[TokenStatus] [varchar](50) NULL,
 CONSTRAINT [PK_Token] PRIMARY KEY CLUSTERED 
(
	[TokenID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [bbk].[BloodBankCentre]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [bbk].[BloodBankCentre](
	[BloodBankCentreID] [varchar](50) NOT NULL,
	[BloodBankCentreName] [varchar](50) NULL,
	[LocationID] [varchar](50) NULL,
	[ContactNo] [varchar](50) NULL,
 CONSTRAINT [PK_BloodBankCentre] PRIMARY KEY CLUSTERED 
(
	[BloodBankCentreID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [bbk].[BloodDonationCampaign]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [bbk].[BloodDonationCampaign](
	[CampaignID] [varchar](50) NOT NULL,
	[OrganizerName] [varchar](255) NULL,
	[OrganizerAddress] [varchar](255) NULL,
	[Email] [varchar](255) NULL,
	[PhoneNumber] [varchar](20) NULL,
	[BloodBankCentreID] [varchar](50) NULL,
	[RegistrationDate] [datetime2](7) NULL,
	[VerifiedBy] [varchar](50) NULL,
	[StartDate] [datetime2](7) NULL,
	[EndDate] [datetime2](7) NULL,
	[TargetAddress] [varchar](255) NULL,
	[TargetLocation] [varchar](50) NULL,
	[NumberOfDonors] [int] NULL,
	[ActiveStatus] [varchar](50) NULL,
 CONSTRAINT [PK__BloodDon__3F5E8D79CD06F95B] PRIMARY KEY CLUSTERED 
(
	[CampaignID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [bbk].[BloodRequest]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [bbk].[BloodRequest](
	[BloodRequestID] [varchar](50) NOT NULL,
	[HospitalID] [varchar](50) NULL,
	[PatientName] [varchar](255) NULL,
	[PatientAge] [int] NULL,
	[PatientSex] [varchar](5) NULL,
	[BloodGroup] [varchar](10) NULL,
	[DoctorInCharge] [varchar](255) NULL,
	[DoctorContact] [varchar](20) NULL,
	[DateOfRequest] [datetime2](7) NULL,
	[DateTimeOfRequirement] [datetime2](7) NULL,
	[ReasonOfTransfusion] [varchar](255) NULL,
	[BloodBankCentreID] [varchar](50) NULL,
	[Status] [varchar](50) NULL,
PRIMARY KEY CLUSTERED 
(
	[BloodRequestID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [bbk].[BloodRequestDetails]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [bbk].[BloodRequestDetails](
	[BloodRequestDetailsID] [varchar](50) NOT NULL,
	[BloodRequestID] [varchar](50) NULL,
	[WholeBloodUnit] [int] NULL,
	[PackedCellUnit] [int] NULL,
	[FreshFrozenPlasmaUnit] [int] NULL,
	[PlateletComponentsUnit] [int] NULL,
	[SingleDonorPlateletUnit] [int] NULL,
	[CryoPoorPlasmaUnit] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[BloodRequestDetailsID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [bbk].[Doctors]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [bbk].[Doctors](
	[DoctorID] [varchar](50) NOT NULL,
	[FullName] [varchar](100) NULL,
	[UserName] [varchar](100) NULL,
	[Password] [varchar](100) NULL,
	[Email] [varchar](100) NULL,
	[PhoneNumber] [varchar](20) NULL,
	[BloodBankCentreID] [varchar](50) NULL,
	[Specialty] [varchar](100) NULL,
	[LicenseNumber] [varchar](50) NULL,
	[LicenseExpirationDate] [date] NULL,
	[DateOfBirth] [date] NULL,
	[Gender] [varchar](10) NULL,
	[Address] [varchar](200) NULL,
PRIMARY KEY CLUSTERED 
(
	[DoctorID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [bbk].[Location]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [bbk].[Location](
	[LocationID] [varchar](50) NOT NULL,
	[LocationName] [varchar](50) NULL,
 CONSTRAINT [PK_emp_Location] PRIMARY KEY CLUSTERED 
(
	[LocationID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [bbk].[OutHospital]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [bbk].[OutHospital](
	[HospitalID] [varchar](50) NOT NULL,
	[HospitalName] [varchar](100) NOT NULL,
	[Email] [varchar](100) NOT NULL,
	[PhoneNumber] [varchar](20) NOT NULL,
	[Address] [varchar](200) NOT NULL,
	[Username] [varchar](50) NOT NULL,
	[Password] [varchar](50) NOT NULL,
	[ApprovedBy] [varchar](100) NOT NULL,
	[LocationID] [varchar](50) NOT NULL,
 CONSTRAINT [PK__OutHospi__38C2E58FA9F51693] PRIMARY KEY CLUSTERED 
(
	[HospitalID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dnr].[BloodRecord]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dnr].[BloodRecord](
	[BloodRecordID] [varchar](50) NOT NULL,
	[BloodBankCentreID] [varchar](50) NOT NULL,
	[DonationID] [varchar](50) NOT NULL,
	[ProcessedDate] [date] NOT NULL,
	[ExpirationDate] [date] NOT NULL,
	[Location] [varchar](100) NOT NULL,
 CONSTRAINT [PK__BloodRec__8568423A7F281F8B] PRIMARY KEY CLUSTERED 
(
	[BloodRecordID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dnr].[DonarDonation]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dnr].[DonarDonation](
	[DonotionID] [varchar](50) NOT NULL,
	[DonorID] [varchar](50) NULL,
	[BloodBankCentreID] [varchar](50) NULL,
	[DonationDate] [date] NULL,
	[QuestionnaireID] [varchar](50) NULL,
	[DoctorID] [varchar](50) NULL,
	[Examination] [varchar](100) NULL,
	[Pulse] [float] NULL,
	[BP] [varchar](50) NULL,
	[HBLevel] [float] NULL,
	[Weight] [float] NULL,
	[Remark] [varchar](50) NULL,
	[NextDonationDate] [datetime2](7) NULL,
	[BloodBagNo] [varchar](50) NULL,
	[Status] [varchar](50) NULL,
	[RemarkRejected] [varchar](200) NULL,
	[FeedBack] [varchar](500) NULL,
 CONSTRAINT [PK_DonarDonation] PRIMARY KEY CLUSTERED 
(
	[DonotionID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dnr].[Donor]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dnr].[Donor](
	[DonorID] [varchar](50) NOT NULL,
	[Name] [varchar](50) NOT NULL,
	[NIC] [varchar](50) NOT NULL,
	[Email] [varchar](100) NOT NULL,
	[Password] [varchar](50) NOT NULL,
	[PhoneNumber] [varchar](20) NOT NULL,
	[OtherPhoneNumber] [varchar](20) NULL,
	[DonationFrequency] [int] NULL,
	[Occupation] [varchar](50) NULL,
	[MaritalStatus] [varchar](20) NULL,
	[Address] [varchar](200) NULL,
	[DateOfBirth] [date] NULL,
	[Location] [varchar](50) NULL,
	[Gender] [varchar](10) NULL,
	[BloodType] [varchar](5) NULL,
PRIMARY KEY CLUSTERED 
(
	[DonorID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dnr].[DonorQuestionnaire]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dnr].[DonorQuestionnaire](
	[QuestionnaireID] [varchar](50) NOT NULL,
	[Q1Prob] [int] NULL,
	[Q1Doctor] [int] NULL,
	[Q1Health] [int] NULL,
	[Q2medCond] [int] NULL,
	[Q3Medication] [int] NULL,
	[Q4Surgery] [int] NULL,
	[Q5Heavywork] [int] NULL,
	[Q6Pregnant] [int] NULL,
	[Q7YellowFever] [int] NULL,
	[Q7TbTyphoid] [int] NULL,
	[Q7Treated] [int] NULL,
	[Q8Immunization] [int] NULL,
	[Q8TattooAcupuncture] [int] NULL,
	[Q8Abroad] [int] NULL,
	[Q8Prison] [int] NULL,
	[Q8Blood] [int] NULL,
	[Q8Malaria] [int] NULL,
	[Q9Dengue] [int] NULL,
	[Q9Fever] [int] NULL,
	[Q9Teeth] [int] NULL,
	[Q10categories] [int] NULL,
	[Q11PartnerCategory] [int] NULL,
	[Q12Symptoms] [int] NULL,
 CONSTRAINT [PK_DonorQuestionnaire] PRIMARY KEY CLUSTERED 
(
	[QuestionnaireID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dnr].[TestRecord]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dnr].[TestRecord](
	[TestID] [varchar](50) NOT NULL,
	[DonationID] [varchar](50) NOT NULL,
	[HemoglobinLevel] [decimal](5, 2) NOT NULL,
	[PlateletLevel] [decimal](5, 2) NOT NULL,
	[HIVTestResult] [varchar](10) NOT NULL,
	[WhiteBloodCellCount] [int] NOT NULL,
	[DiseaseOrVirus] [varchar](50) NULL,
	[TestRecordPdfFile] [varchar](255) NULL,
PRIMARY KEY CLUSTERED 
(
	[TestID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
INSERT [adm].[APIKey] ([KeyID], [KeyValue], [KeyDetails], [CreatedDate], [ActiveStatus]) VALUES (N'0000', N'1032', N'Default App', CAST(N'1900-01-01T00:00:00.000' AS DateTime), N'A')
GO
INSERT [adm].[EmailSettings] ([EmailServer], [SenderName], [WebURL], [SenderEmail], [UseAuthentication], [SenderUsername], [SenderPassword], [PortNumber], [UseSSL]) VALUES (N'smtp.gmail.com', N'Blood Bank Sri Lanka', N'localhost:44313', N'dushmanp123@gmail.com', 1, N'dushmanp123@gmail.com', N'vkubekryoeayxogi', 587, 1)
GO
INSERT [adm].[NumberFormat] ([TableName], [Prefix], [NumberPart], [NumberLength]) VALUES (N'adm.APIKey', N'APIKEY', 0, 5)
GO
INSERT [adm].[NumberFormat] ([TableName], [Prefix], [NumberPart], [NumberLength]) VALUES (N'adm.SystemUser', N'USR', 0, 3)
GO
INSERT [adm].[NumberFormat] ([TableName], [Prefix], [NumberPart], [NumberLength]) VALUES (N'bbk.BloodBankCentre', N'BBKC', 10, 5)
GO
INSERT [adm].[NumberFormat] ([TableName], [Prefix], [NumberPart], [NumberLength]) VALUES (N'bbk.BloodDonationCampaign', N'BDC', 4, 5)
GO
INSERT [adm].[NumberFormat] ([TableName], [Prefix], [NumberPart], [NumberLength]) VALUES (N'bbk.BloodRequest', N'BBR', 15, 5)
GO
INSERT [adm].[NumberFormat] ([TableName], [Prefix], [NumberPart], [NumberLength]) VALUES (N'bbk.BloodRequestDetails', N'BBRD', 12, 5)
GO
INSERT [adm].[NumberFormat] ([TableName], [Prefix], [NumberPart], [NumberLength]) VALUES (N'bbk.Doctors', N'BBD', 5, 5)
GO
INSERT [adm].[NumberFormat] ([TableName], [Prefix], [NumberPart], [NumberLength]) VALUES (N'bbk.Location', N'BBKL', 10, 5)
GO
INSERT [adm].[NumberFormat] ([TableName], [Prefix], [NumberPart], [NumberLength]) VALUES (N'bbk.OutHospital', N'OTH', 13, 5)
GO
INSERT [adm].[NumberFormat] ([TableName], [Prefix], [NumberPart], [NumberLength]) VALUES (N'dnr.BloodRecord', N'DBR', 13, 5)
GO
INSERT [adm].[NumberFormat] ([TableName], [Prefix], [NumberPart], [NumberLength]) VALUES (N'dnr.DonarDonation ', N'DDR', 36, 5)
GO
INSERT [adm].[NumberFormat] ([TableName], [Prefix], [NumberPart], [NumberLength]) VALUES (N'dnr.Donor', N'DNR', 3, 5)
GO
INSERT [adm].[NumberFormat] ([TableName], [Prefix], [NumberPart], [NumberLength]) VALUES (N'dnr.DonorQuestionnaire', N'DRQ', 37, 5)
GO
INSERT [adm].[NumberFormat] ([TableName], [Prefix], [NumberPart], [NumberLength]) VALUES (N'dnr.TestRecord', N'DTR', 12, 5)
GO
INSERT [adm].[SystemUser] ([UserID], [UserType], [BloodBankCentreID], [Username], [Password], [DisplayName], [EmailAddress], [ActiveStatus]) VALUES (N'0000', N'A', N'BBKC00001', N'admin', N'TBai1sKZ/7lujXMRFF58Cw==', N'Administrator', N'dushmanp123@gmail.com', N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'00E49535-B59F-4EC0-ABC7-5786365CB803', N'DoctorRem', N'BBD00001', N'', CAST(N'2023-04-16T21:00:00.000' AS DateTime), CAST(N'2023-07-16T21:00:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'07CE281A-0C72-48F0-B54D-31D3300BB1C2', N'BBRem', N'0000', N'', CAST(N'2023-04-20T19:20:00.000' AS DateTime), CAST(N'2023-07-20T19:20:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'0CB43030-CDD2-4195-B506-35119A420B46', N'CPwReset', N'DNR00001', N'', CAST(N'2023-04-02T14:50:00.000' AS DateTime), CAST(N'2023-04-04T14:50:00.000' AS DateTime), N'CM')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'0EE829A4-F6F5-4955-ADF8-4190528E2E52', N'CPwReset', N'DNR00001', N'', CAST(N'2023-04-02T14:49:00.000' AS DateTime), CAST(N'2023-04-04T14:49:00.000' AS DateTime), N'SS')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'1012A3D2-6350-4BD8-8A21-FEB4106706FE', N'ARem', N'DNR00001', N'', CAST(N'2023-04-08T17:00:00.000' AS DateTime), CAST(N'2023-07-08T17:00:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'10ED78DA-00E1-4403-93C3-1A1899DDA8BE', N'ARem', N'DNR00001', N'', CAST(N'2023-04-23T17:40:00.000' AS DateTime), CAST(N'2023-07-23T17:40:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'12EBFE01-6AB8-4B4A-8072-6263FA08570B', N'DoctorRem', N'BBD00001', N'', CAST(N'2023-04-17T00:21:00.000' AS DateTime), CAST(N'2023-07-17T00:21:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'14A61125-4927-478E-8ED4-DE43E1E55D83', N'BBRem', N'0000', N'', CAST(N'2023-04-21T14:53:00.000' AS DateTime), CAST(N'2023-07-21T14:53:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'14F085B2-64FE-48B6-BA3A-ECC4DBE57132', N'BBRem', N'0000', N'', CAST(N'2023-04-23T20:38:00.000' AS DateTime), CAST(N'2023-07-23T20:38:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'169C9AAF-D97B-41E5-B569-EAB0B5FA58A5', N'ARem', N'DNR00001', N'', CAST(N'2023-04-09T19:39:00.000' AS DateTime), CAST(N'2023-07-09T19:39:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'186C1C93-5ED7-4425-AEC8-2BC09A3ADB8D', N'OutHospitalRem', N'OTH00001', N'', CAST(N'2023-04-13T16:22:00.000' AS DateTime), CAST(N'2023-07-13T16:22:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'18F5DAC8-7ED0-4203-A67D-71C34AFAFD5A', N'ARem', N'DNR00001', N'', CAST(N'2023-04-22T21:45:00.000' AS DateTime), CAST(N'2023-07-22T21:45:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'1D441341-1723-4724-89F8-C682B4B866AE', N'CPwReset', N'DNR00001', N'', CAST(N'2023-04-02T16:19:00.000' AS DateTime), CAST(N'2023-04-04T16:19:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'1D96B4CC-3800-4A54-9E2F-61063ACBDBB2', N'ARem', N'DNR00001', N'', CAST(N'2023-04-22T20:55:00.000' AS DateTime), CAST(N'2023-07-22T20:55:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'1D9F95C4-425C-407E-AF60-019607582419', N'ARem', N'DNR00001', N'', CAST(N'2023-04-17T11:20:00.000' AS DateTime), CAST(N'2023-07-17T11:20:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'20582B96-D0B1-4C28-AC3C-1A512FA642F7', N'BBRem', N'0000', N'', CAST(N'2023-04-18T23:11:00.000' AS DateTime), CAST(N'2023-07-18T23:11:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'22C0A353-4642-4D11-AA61-4725DE9C3BA4', N'DoctorRem', N'0000', N'', CAST(N'2023-04-17T12:54:00.000' AS DateTime), CAST(N'2023-07-17T12:54:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'23641A9D-6E90-4EB3-B212-2CFF74762D91', N'BBRem', N'0000', N'', CAST(N'2023-04-20T16:18:00.000' AS DateTime), CAST(N'2023-07-20T16:18:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'24D630AD-D828-430E-8757-062344A38F3D', N'DoctorRem', N'BBD00001', N'', CAST(N'2023-04-20T22:16:00.000' AS DateTime), CAST(N'2023-07-20T22:16:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'2531C766-176B-45E5-8021-B15ED1ADF232', N'DoctorRem', N'BBD00001', N'', CAST(N'2023-04-16T21:36:00.000' AS DateTime), CAST(N'2023-07-16T21:36:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'28B08E06-4A37-499A-8F39-F8486B7535D0', N'ARem', N'DNR00001', N'', CAST(N'2023-04-22T18:50:00.000' AS DateTime), CAST(N'2023-07-22T18:50:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'2AFD4025-8286-4A94-AA31-B1D71992A3BD', N'APwReset', N'DNR00001', N'', CAST(N'2023-04-28T22:09:00.000' AS DateTime), CAST(N'2023-04-30T22:09:00.000' AS DateTime), N'SS')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'2E09ACBF-E5F5-4E79-9216-A7E8592C820D', N'APwReset', N'OTH00001', N'', CAST(N'2023-04-09T19:35:00.000' AS DateTime), CAST(N'2023-04-11T19:35:00.000' AS DateTime), N'SS')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'3133BAFA-029D-429B-8CB8-60D06F853CCF', N'OutHospitalRem', N'OTH00001', N'', CAST(N'2023-04-17T13:05:00.000' AS DateTime), CAST(N'2023-07-17T13:05:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'32FC2A2A-1FDF-4B42-8F70-32C2BDE18E75', N'APwReset', N'0000', N'', CAST(N'2023-04-18T22:03:00.000' AS DateTime), CAST(N'2023-04-20T22:03:00.000' AS DateTime), N'CM')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'338328F6-C9F6-4A5F-B4F7-5DAF8281400B', N'ARem', N'DNR00001', N'', CAST(N'2023-04-07T01:09:00.000' AS DateTime), CAST(N'2023-07-07T01:09:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'354014EF-383D-405A-9A7B-1311210566BF', N'BBRem', N'0000', N'', CAST(N'2023-04-23T21:04:00.000' AS DateTime), CAST(N'2023-07-23T21:04:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'376629F5-AC4E-44B1-BE05-921D4225D265', N'APwReset', N'BBD00004', N'', CAST(N'2023-04-24T23:00:00.000' AS DateTime), CAST(N'2023-04-26T23:00:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'381344BC-7A3D-4838-A65C-05111FA08A21', N'BBRem', N'0000', N'', CAST(N'2023-04-17T20:27:00.000' AS DateTime), CAST(N'2023-07-17T20:27:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'3885ACA1-FA6D-47A0-8888-16214EF77D7F', N'ARem', N'DNR00001', N'', CAST(N'2023-04-08T18:55:00.000' AS DateTime), CAST(N'2023-07-08T18:55:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'3B2BA86C-64A8-4F97-8EB3-DC2A08B0FF18', N'BBRem', N'0000', N'', CAST(N'2023-04-24T16:45:00.000' AS DateTime), CAST(N'2023-07-24T16:45:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'3D4EE0F2-5D40-4B10-9DDB-CE35C1CA5178', N'ARem', N'DNR00001', N'', CAST(N'2023-04-08T14:41:00.000' AS DateTime), CAST(N'2023-07-08T14:41:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'3D76893F-7A5E-4450-A8B4-E0A9AD630C62', N'BBRem', N'0000', N'', CAST(N'2023-04-20T23:10:00.000' AS DateTime), CAST(N'2023-07-20T23:10:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'3DB6EA2F-D859-4A6A-8F32-C42E2BD38663', N'CPwReset', N'DNR00001', N'', CAST(N'2023-04-02T14:37:00.000' AS DateTime), CAST(N'2023-04-04T14:37:00.000' AS DateTime), N'SS')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'3EF9CC26-8CB2-4D77-8BA7-F44626DA9F9C', N'APwReset', N'DNR00001', N'', CAST(N'2023-04-02T08:39:00.000' AS DateTime), CAST(N'2023-04-04T08:39:00.000' AS DateTime), N'SS')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'420A8A07-8516-43BE-9E9A-008BD72AE619', N'DoctorRem', N'BBD00001', N'', CAST(N'2023-04-15T12:26:00.000' AS DateTime), CAST(N'2023-07-15T12:26:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'42299BD8-BFC6-49AB-8B14-4A65518A0CD1', N'DoctorRem', N'BBD00001', N'', CAST(N'2023-04-16T19:24:00.000' AS DateTime), CAST(N'2023-07-16T19:24:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'435FE962-8054-4CE6-AF4A-3C169868EE63', N'APwReset', N'DNR00002', N'', CAST(N'2023-04-07T19:20:00.000' AS DateTime), CAST(N'2023-04-09T19:20:00.000' AS DateTime), N'CM')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'4415A3D1-20CF-4F05-AB01-06D9F320B395', N'APwReset', N'OTH00001', N'', CAST(N'2023-04-09T18:41:00.000' AS DateTime), CAST(N'2023-04-11T18:41:00.000' AS DateTime), N'SS')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'44AA4BEB-911F-45A3-BFE7-06A6E8C19B2A', N'ARem', N'DNR00001', N'', CAST(N'2023-04-24T00:23:00.000' AS DateTime), CAST(N'2023-07-24T00:23:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'44FAE143-771D-4F12-BA40-C04BB3AB68B0', N'BBRem', N'0000', N'', CAST(N'2023-04-20T17:21:00.000' AS DateTime), CAST(N'2023-07-20T17:21:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'456F931B-2288-4F78-9B8F-A48603554D72', N'OutHospitalRem', N'OTH00001', N'', CAST(N'2023-04-09T22:06:00.000' AS DateTime), CAST(N'2023-07-09T22:06:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'4A184C59-5FB3-4543-A06E-74DA811A5447', N'OutHospitalRem', N'OTH00001', N'', CAST(N'2023-04-09T21:07:00.000' AS DateTime), CAST(N'2023-07-09T21:07:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'4A628BFF-EF2B-4BB8-9B47-1CDBE896B5A8', N'DoctorRem', N'BBD00001', N'', CAST(N'2023-04-17T13:04:00.000' AS DateTime), CAST(N'2023-07-17T13:04:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'4C7D7A73-3DF4-477C-9A19-E0673B25A772', N'BBRem', N'0000', N'', CAST(N'2023-04-18T21:56:00.000' AS DateTime), CAST(N'2023-07-18T21:56:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'4CD6623B-36EB-4E7A-9DA4-D1789EFDE921', N'BBRem', N'0000', N'', CAST(N'2023-04-21T14:11:00.000' AS DateTime), CAST(N'2023-07-21T14:11:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'4DBBB39E-C1EA-4019-BA94-5AF3BCB2819A', N'BBRem', N'0000', N'', CAST(N'2023-04-22T00:30:00.000' AS DateTime), CAST(N'2023-07-22T00:30:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'4E9E30D4-77B8-456F-80BB-99F7FDFE5CD5', N'APwReset', N'0000', N'', CAST(N'2023-04-17T12:59:00.000' AS DateTime), CAST(N'2023-04-19T12:59:00.000' AS DateTime), N'CM')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'535438E3-4802-473F-ADBA-E3C25D3859F7', N'ARem', N'DNR00001', N'', CAST(N'2023-04-08T11:36:00.000' AS DateTime), CAST(N'2023-07-08T11:36:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'53ABD095-370D-41CC-AAB3-01BE088051BF', N'APwReset', N'DNR00001', N'', CAST(N'2023-04-02T08:41:00.000' AS DateTime), CAST(N'2023-04-04T08:41:00.000' AS DateTime), N'SS')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'562546E5-479B-4537-BCD6-0017729BFFA4', N'ARem', N'DNR00001', N'', CAST(N'2023-04-02T15:02:00.000' AS DateTime), CAST(N'2023-07-02T15:02:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'5644D4EB-4176-491D-8102-33EF0664833F', N'ARem', N'DNR00001', N'', CAST(N'2023-04-22T17:55:00.000' AS DateTime), CAST(N'2023-07-22T17:55:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'57A70A66-9D7C-4A72-ABE4-FD73D0872EE8', N'CPwReset', N'DNR00001', N'', CAST(N'2023-04-02T16:14:00.000' AS DateTime), CAST(N'2023-04-04T16:14:00.000' AS DateTime), N'SS')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'62E52586-F4BB-485A-92EC-588D7E4FE591', N'APwReset', N'DNR00001', N'', CAST(N'2023-04-09T18:47:00.000' AS DateTime), CAST(N'2023-04-11T18:47:00.000' AS DateTime), N'SS')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'666B08FC-4499-4509-9DAA-C4B8C5F69C10', N'ARem', N'DNR00001', N'', CAST(N'2023-04-06T14:19:00.000' AS DateTime), CAST(N'2023-07-06T14:19:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'67CAE331-10CE-4C00-BCF2-360F708B7A66', N'BBRem', N'0000', N'', CAST(N'2023-04-21T14:56:00.000' AS DateTime), CAST(N'2023-07-21T14:56:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'6CD7ED08-558C-47D8-985E-F513A4551236', N'APwReset', N'DNR00001', N'', CAST(N'2023-04-28T21:47:00.000' AS DateTime), CAST(N'2023-04-30T21:47:00.000' AS DateTime), N'SS')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'6DC8B063-5E54-4F1B-AE4E-33C0C81C3079', N'ARem', N'DNR00001', N'', CAST(N'2023-04-13T12:03:00.000' AS DateTime), CAST(N'2023-07-13T12:03:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'70034676-6612-4FFD-9B0B-E6ABE9259161', N'CPwReset', N'DNR00001', N'', CAST(N'2023-04-02T14:48:00.000' AS DateTime), CAST(N'2023-04-04T14:48:00.000' AS DateTime), N'SS')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'71E10620-D886-4D7C-BFB2-78953A68AC37', N'CPwReset', N'DNR00001', N'', CAST(N'2023-04-02T14:38:00.000' AS DateTime), CAST(N'2023-04-04T14:38:00.000' AS DateTime), N'SS')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'79B7CEC0-3880-4080-92F9-AEF577737501', N'ARem', N'DNR00001', N'', CAST(N'2023-04-17T01:30:00.000' AS DateTime), CAST(N'2023-07-17T01:30:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'7B133470-D841-4256-B374-E8AAEC092BB8', N'APwReset', N'BBD00001', N'', CAST(N'2023-04-15T00:09:00.000' AS DateTime), CAST(N'2023-04-17T00:09:00.000' AS DateTime), N'CM')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'7B34434C-9411-4CE8-B8DC-BF38752B8203', N'APwReset', N'DNR00001', N'', CAST(N'2023-04-02T12:36:00.000' AS DateTime), CAST(N'2023-04-04T12:36:00.000' AS DateTime), N'SS')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'7B3A25E7-39CB-417A-B9C6-7CFCDC5930F4', N'APwReset', N'0000', N'', CAST(N'2023-04-17T12:58:00.000' AS DateTime), CAST(N'2023-04-19T12:58:00.000' AS DateTime), N'SS')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'7C34990D-217D-4F89-9AAB-E4C337D4791B', N'BBRem', N'0000', N'', CAST(N'2023-04-21T14:52:00.000' AS DateTime), CAST(N'2023-07-21T14:52:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'7C9B64E6-F329-499E-BF4C-EB94B2645B5F', N'BBRem', N'0000', N'', CAST(N'2023-04-21T15:35:00.000' AS DateTime), CAST(N'2023-07-21T15:35:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'7D0ECFE9-F8C2-485A-9E26-AAFA5DC89EDB', N'ARem', N'DNR00001', N'', CAST(N'2023-04-09T19:33:00.000' AS DateTime), CAST(N'2023-07-09T19:33:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'7F383FF1-E0F9-410D-A559-1047ED36BDAC', N'BBRem', N'0000', N'', CAST(N'2023-04-17T15:18:00.000' AS DateTime), CAST(N'2023-07-17T15:18:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'8199DE7E-556A-4AA9-AA39-3FFA64737AA2', N'BBRem', N'0000', N'', CAST(N'2023-04-17T16:19:00.000' AS DateTime), CAST(N'2023-07-17T16:19:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'84475CF1-A225-43FD-8D10-46C49E5DE1CB', N'CPwReset', N'DNR00001', N'', CAST(N'2023-04-02T14:35:00.000' AS DateTime), CAST(N'2023-04-04T14:35:00.000' AS DateTime), N'SS')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'846FFC02-2EE3-484F-A036-7279C9D1AD48', N'ARem', N'DNR00001', N'', CAST(N'2023-04-09T11:38:00.000' AS DateTime), CAST(N'2023-07-09T11:38:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'86DB053B-E26E-405D-AD14-D1363EC9AF6C', N'ARem', N'DNR00001', N'', CAST(N'2023-04-16T19:52:00.000' AS DateTime), CAST(N'2023-07-16T19:52:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'884C6FB2-CCD9-47D9-B155-C14258341D1A', N'ARem', N'DNR00001', N'', CAST(N'2023-04-23T07:12:00.000' AS DateTime), CAST(N'2023-07-23T07:12:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'88823133-34ED-4915-BF7E-25762A8D3857', N'BBRem', N'0000', N'', CAST(N'2023-04-22T00:08:00.000' AS DateTime), CAST(N'2023-07-22T00:08:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'8D7BE919-88A9-45C8-8A33-B7A641952AD9', N'DoctorRem', N'BBD00001', N'', CAST(N'2023-04-21T15:53:00.000' AS DateTime), CAST(N'2023-07-21T15:53:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'8E0962D4-2B82-4E41-8CB0-367D78ED719E', N'ARem', N'DNR00001', N'', CAST(N'2023-04-07T17:56:00.000' AS DateTime), CAST(N'2023-07-07T17:56:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'91305B5E-BB3D-485A-88A0-169BADB94A38', N'DoctorRem', N'BBD00001', N'', CAST(N'2023-04-16T23:17:00.000' AS DateTime), CAST(N'2023-07-16T23:17:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'92AE295D-F384-45BC-9E46-412EA53A14A3', N'OutHospitalRem', N'OTH00001', N'', CAST(N'2023-04-09T23:18:00.000' AS DateTime), CAST(N'2023-07-09T23:18:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'94B165CD-984A-4525-84B5-7255C598E1B1', N'BBRem', N'0000', N'', CAST(N'2023-04-18T23:28:00.000' AS DateTime), CAST(N'2023-07-18T23:28:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'961298EA-B96A-46D8-A42B-9FED9CDBE281', N'ARem', N'DNR00003', N'', CAST(N'2023-04-28T21:25:00.000' AS DateTime), CAST(N'2023-07-28T21:25:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'999A49B2-5D97-4101-8690-B0CDF6AD50B1', N'ARem', N'DNR00001', N'', CAST(N'2023-04-08T13:01:00.000' AS DateTime), CAST(N'2023-07-08T13:01:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'9FAB4D96-9245-4136-A399-6F44CC14F413', N'BBRem', N'0000', N'', CAST(N'2023-04-24T10:29:00.000' AS DateTime), CAST(N'2023-07-24T10:29:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'A13DAC0A-7D80-4762-8826-22D9977E4C55', N'ARem', N'DNR00001', N'', CAST(N'2023-04-23T16:02:00.000' AS DateTime), CAST(N'2023-07-23T16:02:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'AAED6E7E-939F-485C-98F7-9327C740D579', N'APwReset', N'DNR00001', N'', CAST(N'2023-04-27T14:04:00.000' AS DateTime), CAST(N'2023-04-29T14:04:00.000' AS DateTime), N'SS')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'AE594338-F7E7-4ABB-9E72-12AFAEFDEA26', N'BBRem', N'0000', N'', CAST(N'2023-04-22T12:12:00.000' AS DateTime), CAST(N'2023-07-22T12:12:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'B0AE977F-A8BC-4EE6-BF67-FE68981A4772', N'BBRem', N'0000', N'', CAST(N'2023-04-21T22:35:00.000' AS DateTime), CAST(N'2023-07-21T22:35:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'B0F83D78-E928-4726-B669-81CF9B542880', N'APwReset', N'OTH00001', N'', CAST(N'2023-04-09T18:46:00.000' AS DateTime), CAST(N'2023-04-11T18:46:00.000' AS DateTime), N'SS')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'B128AA6B-16E0-46A0-9763-B7F6533975A5', N'APwReset', N'DNR00001', N'', CAST(N'2023-04-02T14:17:00.000' AS DateTime), CAST(N'2023-04-04T14:17:00.000' AS DateTime), N'SS')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'B3666CE0-6028-4D2B-9CFF-60C2F6FABDC4', N'BBRem', N'0000', N'', CAST(N'2023-04-24T01:08:00.000' AS DateTime), CAST(N'2023-07-24T01:08:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'B42A9D13-2DCE-4B93-BA21-7815D0F886C7', N'OutHospitalRem', N'OTH00001', N'', CAST(N'2023-04-13T11:29:00.000' AS DateTime), CAST(N'2023-07-13T11:29:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'B4CC1A9C-E317-4B09-AFEB-F30958CADA44', N'OutHospitalRem', N'OTH00001', N'', CAST(N'2023-04-13T19:13:00.000' AS DateTime), CAST(N'2023-07-13T19:13:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'B4E867C0-0BDE-4969-A8A9-1EDECCB829E6', N'ARem', N'DNR00001', N'', CAST(N'2023-04-07T01:38:00.000' AS DateTime), CAST(N'2023-07-07T01:38:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'B6CFBDDA-265D-41A4-AD4E-1F81D3695A7F', N'BBRem', N'0000', N'', CAST(N'2023-04-18T00:11:00.000' AS DateTime), CAST(N'2023-07-18T00:11:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'B7408B89-0C9A-49B8-8C78-196F86A7ECB9', N'ARem', N'DNR00001', N'', CAST(N'2023-04-08T19:24:00.000' AS DateTime), CAST(N'2023-07-08T19:24:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'B79B597C-E7B7-4343-98DC-83A10338956E', N'OutHospitalRem', N'OTH00001', N'', CAST(N'2023-04-17T18:39:00.000' AS DateTime), CAST(N'2023-07-17T18:39:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'B86BDE89-1B47-4A0D-807F-ACC1EEB6CC62', N'APwReset', N'DNR00001', N'', CAST(N'2023-04-02T12:30:00.000' AS DateTime), CAST(N'2023-04-04T12:30:00.000' AS DateTime), N'SS')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'BD46EC73-7EC7-441F-B80E-A2BB50F3DF13', N'CPwReset', N'DNR00001', N'', CAST(N'2023-04-02T14:37:00.000' AS DateTime), CAST(N'2023-04-04T14:37:00.000' AS DateTime), N'SS')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'BE5E8747-7603-4C1F-B652-9EC7CB9AD96B', N'BBRem', N'0000', N'', CAST(N'2023-04-22T11:18:00.000' AS DateTime), CAST(N'2023-07-22T11:18:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'BEB5D1AD-2BE1-4376-9987-7A8014BFA44F', N'BBRem', N'0000', N'', CAST(N'2023-04-20T15:54:00.000' AS DateTime), CAST(N'2023-07-20T15:54:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'C15D3AC2-7A61-401C-8064-58CE1D9889C7', N'DoctorRem', N'BBD00001', N'', CAST(N'2023-04-15T02:11:00.000' AS DateTime), CAST(N'2023-07-15T02:11:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'C18FD4F6-57E3-4D1D-822E-CC5F2553AA6F', N'ARem', N'DNR00001', N'', CAST(N'2023-04-17T00:54:00.000' AS DateTime), CAST(N'2023-07-17T00:54:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'C28EFFB0-924A-4D21-BBD6-7DFF2005A97F', N'BBRem', N'0000', N'', CAST(N'2023-04-23T22:36:00.000' AS DateTime), CAST(N'2023-07-23T22:36:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'C2FF13E5-17F4-472B-BF8F-73C2565CD707', N'DoctorRem', N'BBD00001', N'', CAST(N'2023-04-15T02:14:00.000' AS DateTime), CAST(N'2023-07-15T02:14:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'C39C225A-D11C-4F1B-ADA1-9EFC6989B515', N'APwReset', N'OTH00001', N'', CAST(N'2023-04-09T19:40:00.000' AS DateTime), CAST(N'2023-04-11T19:40:00.000' AS DateTime), N'CM')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'C3C036E3-FBC0-4343-A359-D73826022666', N'OutHospitalRem', N'OTH00001', N'', CAST(N'2023-04-09T19:40:00.000' AS DateTime), CAST(N'2023-07-09T19:40:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'C452368E-E280-4E04-9D28-B3705F733837', N'OutHospitalRem', N'OTH00001', N'', CAST(N'2023-04-13T12:01:00.000' AS DateTime), CAST(N'2023-07-13T12:01:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'C8CBC7A0-895B-4C9E-8CED-303A4C45E27B', N'ARem', N'DNR00001', N'', CAST(N'2023-04-15T02:39:00.000' AS DateTime), CAST(N'2023-07-15T02:39:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'C9E48F03-53C8-4F07-976C-AA877051F9A1', N'ARem', N'DNR00001', N'', CAST(N'2023-04-22T17:24:00.000' AS DateTime), CAST(N'2023-07-22T17:24:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'CA9F1CF7-219A-4738-8A34-271BC3F2DCB7', N'DoctorRem', N'BBD00001', N'', CAST(N'2023-04-16T01:09:00.000' AS DateTime), CAST(N'2023-07-16T01:09:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'CB99D092-C360-4A33-8060-DA6412692C3D', N'APwReset', N'OTH00001', N'', CAST(N'2023-04-09T18:56:00.000' AS DateTime), CAST(N'2023-04-11T18:56:00.000' AS DateTime), N'SS')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'D207CFF5-06DB-45E8-A596-2DAD926B1D60', N'APwReset', N'DNR00001', N'', CAST(N'2023-04-09T19:25:00.000' AS DateTime), CAST(N'2023-04-11T19:25:00.000' AS DateTime), N'CM')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'D25913AF-E501-4AC1-9B6E-3051E1807B5E', N'ARem', N'DNR00001', N'', CAST(N'2023-04-02T08:25:00.000' AS DateTime), CAST(N'2023-07-02T08:25:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'D2BC7228-D334-4A1A-84A8-7BBA504CD2BD', N'APwReset', N'DNR00001', N'', CAST(N'2023-04-09T19:33:00.000' AS DateTime), CAST(N'2023-04-11T19:33:00.000' AS DateTime), N'CM')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'D379B820-B03C-4252-B8D4-1E14F9640F76', N'BBRem', N'0000', N'', CAST(N'2023-04-21T11:36:00.000' AS DateTime), CAST(N'2023-07-21T11:36:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'D3C41A4B-7248-449E-A8B9-6534FCE76536', N'APwReset', N'OTH00001', N'', CAST(N'2023-04-09T18:37:00.000' AS DateTime), CAST(N'2023-04-11T18:37:00.000' AS DateTime), N'SS')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'D4749A8F-6651-4501-9AED-FD65AC8F6695', N'OutHospitalRem', N'OTH00001', N'', CAST(N'2023-04-17T17:13:00.000' AS DateTime), CAST(N'2023-07-17T17:13:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'D571ABC4-E47D-4952-8792-F038A978A059', N'DoctorRem', N'0000', N'', CAST(N'2023-04-17T13:06:00.000' AS DateTime), CAST(N'2023-07-17T13:06:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'D6141E99-5059-4EBF-8E0D-0A7247DB24F3', N'BBRem', N'0000', N'', CAST(N'2023-04-17T21:58:00.000' AS DateTime), CAST(N'2023-07-17T21:58:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'D8B185FF-52F6-4067-A815-6B1622EA3CE0', N'BBRem', N'0000', N'', CAST(N'2023-04-17T13:10:00.000' AS DateTime), CAST(N'2023-07-17T13:10:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'DEA9E53B-8581-414B-BC37-0F1C2E99C09C', N'BBRem', N'0000', N'', CAST(N'2023-04-17T21:22:00.000' AS DateTime), CAST(N'2023-07-17T21:22:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'E05E0388-3252-4077-A94E-359E85CED728', N'BBRem', N'0000', N'', CAST(N'2023-04-21T15:51:00.000' AS DateTime), CAST(N'2023-07-21T15:51:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'E06944B3-2038-4BEC-8276-8B35D81D7F77', N'APwReset', N'DNR00001', N'', CAST(N'2023-04-28T21:44:00.000' AS DateTime), CAST(N'2023-04-30T21:44:00.000' AS DateTime), N'SS')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'E1DF007D-2110-4CD6-8574-804F8E8707DD', N'DoctorRem', N'BBD00001', N'', CAST(N'2023-04-16T22:43:00.000' AS DateTime), CAST(N'2023-07-16T22:43:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'E2319D9C-B539-4F4E-AFCD-AF59243B44A2', N'ARem', N'DNR00001', N'', CAST(N'2023-04-07T19:36:00.000' AS DateTime), CAST(N'2023-07-07T19:36:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'E2F95C1B-E674-468D-BAF3-9186A5455C2F', N'DoctorRem', N'BBD00001', N'', CAST(N'2023-04-24T12:21:00.000' AS DateTime), CAST(N'2023-07-24T12:21:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'E32E0243-9E0A-4ED0-821B-1AEE3D3F67D9', N'ARem', N'DNR00001', N'', CAST(N'2023-04-07T21:48:00.000' AS DateTime), CAST(N'2023-07-07T21:48:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'E5272170-01D3-45B6-A462-FC0C8FE7312C', N'ARem', N'DNR00001', N'', CAST(N'2023-04-17T01:44:00.000' AS DateTime), CAST(N'2023-07-17T01:44:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'E585FC18-5DAD-4430-901C-457ECD59A8C3', N'APwReset', N'DNR00001', N'', CAST(N'2023-05-01T14:43:00.000' AS DateTime), CAST(N'2023-05-03T14:43:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'E70B0555-FC50-4A96-BD71-9C6585D2110F', N'BBRem', N'0000', N'', CAST(N'2023-04-17T20:42:00.000' AS DateTime), CAST(N'2023-07-17T20:42:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'E737216D-6D01-484A-A38A-0FA5BA7A80D8', N'APwReset', N'DNR00001', N'', CAST(N'2023-04-02T08:41:00.000' AS DateTime), CAST(N'2023-04-04T08:41:00.000' AS DateTime), N'SS')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'EA41C9F2-E9E1-4E3C-8E10-2B7C235DACAE', N'DoctorRem', N'BBD00001', N'', CAST(N'2023-04-24T12:32:00.000' AS DateTime), CAST(N'2023-07-24T12:32:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'EA56E6A4-3334-452A-BF86-64E530DA92E9', N'ARem', N'DNR00001', N'', CAST(N'2023-04-22T21:00:00.000' AS DateTime), CAST(N'2023-07-22T21:00:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'EAE58033-1289-4B73-A4F8-19E887E905A7', N'ARem', N'DNR00001', N'', CAST(N'2023-04-16T18:56:00.000' AS DateTime), CAST(N'2023-07-16T18:56:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'EFC0B11C-27A2-45B0-9994-C89DD598CCDB', N'BBRem', N'0000', N'', CAST(N'2023-04-23T21:18:00.000' AS DateTime), CAST(N'2023-07-23T21:18:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'F6CC9DC2-9A1D-42AC-AA69-C890BA157044', N'DoctorRem', N'0000', N'', CAST(N'2023-04-17T13:01:00.000' AS DateTime), CAST(N'2023-07-17T13:01:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'F70A8AD6-2261-4E44-BC8C-0355B6D9481C', N'APwReset', N'DNR00001', N'', CAST(N'2023-04-02T12:39:00.000' AS DateTime), CAST(N'2023-04-04T12:39:00.000' AS DateTime), N'SS')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'F83195ED-DCC2-4C36-A06E-32F18D6F5768', N'DoctorRem', N'BBD00001', N'', CAST(N'2023-04-16T19:07:00.000' AS DateTime), CAST(N'2023-07-16T19:07:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'FA32D376-4C65-4250-B2B7-453B313DC070', N'OutHospitalRem', N'OTH00001', N'', CAST(N'2023-04-09T17:59:00.000' AS DateTime), CAST(N'2023-07-09T17:59:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'FE3C9593-B729-4A67-9EBD-CADD8F507FB3', N'ARem', N'DNR00001', N'', CAST(N'2023-04-23T14:00:00.000' AS DateTime), CAST(N'2023-07-23T14:00:00.000' AS DateTime), N'A')
GO
INSERT [adm].[Token] ([TokenID], [TokenType], [RefID], [TokenData], [CreatedDate], [ExpiryDate], [TokenStatus]) VALUES (N'FE648D58-6793-497E-A768-A3828545F16E', N'BBRem', N'0000', N'', CAST(N'2023-04-17T21:30:00.000' AS DateTime), CAST(N'2023-07-17T21:30:00.000' AS DateTime), N'A')
GO
INSERT [bbk].[BloodBankCentre] ([BloodBankCentreID], [BloodBankCentreName], [LocationID], [ContactNo]) VALUES (N'BBKC00001', N'GH ', N'BBKL00001', NULL)
GO
INSERT [bbk].[BloodBankCentre] ([BloodBankCentreID], [BloodBankCentreName], [LocationID], [ContactNo]) VALUES (N'BBKC00002', N'BH', N'BBKL00002', NULL)
GO
INSERT [bbk].[BloodBankCentre] ([BloodBankCentreID], [BloodBankCentreName], [LocationID], [ContactNo]) VALUES (N'BBKC00003', N'CH', N'BBKL00003', NULL)
GO
INSERT [bbk].[BloodBankCentre] ([BloodBankCentreID], [BloodBankCentreName], [LocationID], [ContactNo]) VALUES (N'BBKC00004', N'DD', N'BBKL00004', NULL)
GO
INSERT [bbk].[BloodBankCentre] ([BloodBankCentreID], [BloodBankCentreName], [LocationID], [ContactNo]) VALUES (N'BBKC00005', N'SD', N'BBKL00005', NULL)
GO
INSERT [bbk].[BloodBankCentre] ([BloodBankCentreID], [BloodBankCentreName], [LocationID], [ContactNo]) VALUES (N'BBKC00006', N'TY', N'BBKL00006', NULL)
GO
INSERT [bbk].[BloodBankCentre] ([BloodBankCentreID], [BloodBankCentreName], [LocationID], [ContactNo]) VALUES (N'BBKC00007', N'WW', N'BBKL00007', NULL)
GO
INSERT [bbk].[BloodBankCentre] ([BloodBankCentreID], [BloodBankCentreName], [LocationID], [ContactNo]) VALUES (N'BBKC00008', N'DD', N'BBKL00008', NULL)
GO
INSERT [bbk].[BloodBankCentre] ([BloodBankCentreID], [BloodBankCentreName], [LocationID], [ContactNo]) VALUES (N'BBKC00009', N'TT', N'BBKL00009', NULL)
GO
INSERT [bbk].[BloodBankCentre] ([BloodBankCentreID], [BloodBankCentreName], [LocationID], [ContactNo]) VALUES (N'BBKC00010', N'QQ', N'BBKL00010', NULL)
GO
INSERT [bbk].[BloodDonationCampaign] ([CampaignID], [OrganizerName], [OrganizerAddress], [Email], [PhoneNumber], [BloodBankCentreID], [RegistrationDate], [VerifiedBy], [StartDate], [EndDate], [TargetAddress], [TargetLocation], [NumberOfDonors], [ActiveStatus]) VALUES (N'BDC00001', N'dushman', N'123 Main St', N'duhman@email.com', N'555-123-4567', N'BBKC00001', CAST(N'2022-04-08T10:00:00.0000000' AS DateTime2), N'Jane Smith', CAST(N'2022-04-10T10:00:00.0000000' AS DateTime2), CAST(N'2022-04-15T10:00:00.0000000' AS DateTime2), N'456 Oak St', N'BBKL00001', 50, N'A')
GO
INSERT [bbk].[BloodDonationCampaign] ([CampaignID], [OrganizerName], [OrganizerAddress], [Email], [PhoneNumber], [BloodBankCentreID], [RegistrationDate], [VerifiedBy], [StartDate], [EndDate], [TargetAddress], [TargetLocation], [NumberOfDonors], [ActiveStatus]) VALUES (N'BDC00002', N'Ravindusdfsd', N'123 Main St', N'Ravindu@email.com', N'0764817070', N'BBKC00001', CAST(N'2023-04-08T10:00:00.0000000' AS DateTime2), N'Jane Smith', CAST(N'2023-04-10T00:00:00.0000000' AS DateTime2), CAST(N'2023-04-15T00:00:00.0000000' AS DateTime2), N'456 Oak St', N'BBKL00005', 50, N'A')
GO
INSERT [bbk].[BloodDonationCampaign] ([CampaignID], [OrganizerName], [OrganizerAddress], [Email], [PhoneNumber], [BloodBankCentreID], [RegistrationDate], [VerifiedBy], [StartDate], [EndDate], [TargetAddress], [TargetLocation], [NumberOfDonors], [ActiveStatus]) VALUES (N'BDC00003', N'Dushman', N'Dushman', N'dusgmn@gmail.com', N'0678567567456', N'BBKC00001', CAST(N'2023-04-25T14:54:00.0000000' AS DateTime2), N'efsdfsdfsdfea', CAST(N'2023-04-27T00:00:00.0000000' AS DateTime2), CAST(N'1900-01-01T00:00:00.0000000' AS DateTime2), N'ertwsefsadas', N'BBKL00005', 234, N'A')
GO
INSERT [bbk].[BloodRequest] ([BloodRequestID], [HospitalID], [PatientName], [PatientAge], [PatientSex], [BloodGroup], [DoctorInCharge], [DoctorContact], [DateOfRequest], [DateTimeOfRequirement], [ReasonOfTransfusion], [BloodBankCentreID], [Status]) VALUES (N'BBR00010', N'OTH00013', N'Himesh Panchalingam', 14, N'M', N'B+', N'Saman', N'07684170606', CAST(N'2023-04-17T17:50:27.0433333' AS DateTime2), CAST(N'2023-04-01T17:50:00.0000000' AS DateTime2), N'testing 2 process', N'BBKC00001', N'DL')
GO
INSERT [bbk].[BloodRequest] ([BloodRequestID], [HospitalID], [PatientName], [PatientAge], [PatientSex], [BloodGroup], [DoctorInCharge], [DoctorContact], [DateOfRequest], [DateTimeOfRequirement], [ReasonOfTransfusion], [BloodBankCentreID], [Status]) VALUES (N'BBR00012', N'OTH00013', N'Dushman', 18, N'M', N'O+', N'Wimaladaramasuriya ', N'076817070', CAST(N'2023-04-17T17:49:32.0533333' AS DateTime2), CAST(N'2023-03-01T17:48:00.0000000' AS DateTime2), N'testing process for blood request', N'', N'DL')
GO
INSERT [bbk].[BloodRequest] ([BloodRequestID], [HospitalID], [PatientName], [PatientAge], [PatientSex], [BloodGroup], [DoctorInCharge], [DoctorContact], [DateOfRequest], [DateTimeOfRequirement], [ReasonOfTransfusion], [BloodBankCentreID], [Status]) VALUES (N'BBR00013', N'OTH00013', N'Himesh Panchalingam', 14, N'M', N'B+', N'Saman', N'07684170606', CAST(N'2023-04-17T17:50:27.0433333' AS DateTime2), CAST(N'2023-04-01T17:50:00.0000000' AS DateTime2), N'testing 2 process', N'', N'RB')
GO
INSERT [bbk].[BloodRequest] ([BloodRequestID], [HospitalID], [PatientName], [PatientAge], [PatientSex], [BloodGroup], [DoctorInCharge], [DoctorContact], [DateOfRequest], [DateTimeOfRequirement], [ReasonOfTransfusion], [BloodBankCentreID], [Status]) VALUES (N'BBR00014', N'OTH00013', N'2323423', 12, N'M', N'A+', N'sdfsd', N'23423434', CAST(N'2023-04-23T23:52:34.8300000' AS DateTime2), CAST(N'2023-04-27T23:52:00.0000000' AS DateTime2), N'vsdfsdf', N'BBKC00001', N'NA')
GO
INSERT [bbk].[BloodRequest] ([BloodRequestID], [HospitalID], [PatientName], [PatientAge], [PatientSex], [BloodGroup], [DoctorInCharge], [DoctorContact], [DateOfRequest], [DateTimeOfRequirement], [ReasonOfTransfusion], [BloodBankCentreID], [Status]) VALUES (N'BBR00015', N'OTH00013', N'qew', 45, N'M', N'A+', N'545', N'4efgdffx', CAST(N'2023-04-27T14:13:05.0233333' AS DateTime2), CAST(N'2023-04-29T15:12:00.0000000' AS DateTime2), N'xfgdf', N'BBKC00001', N'A')
GO
INSERT [bbk].[BloodRequest] ([BloodRequestID], [HospitalID], [PatientName], [PatientAge], [PatientSex], [BloodGroup], [DoctorInCharge], [DoctorContact], [DateOfRequest], [DateTimeOfRequirement], [ReasonOfTransfusion], [BloodBankCentreID], [Status]) VALUES (N'BBR00019', N'OTH00013', N'Himesh Panchalingam', 14, N'M', N'B+', N'Saman', N'07684170606', CAST(N'2023-04-17T17:50:27.0433333' AS DateTime2), CAST(N'2023-04-01T17:50:00.0000000' AS DateTime2), N'testing 2 process', N'', N'RO')
GO
INSERT [bbk].[BloodRequestDetails] ([BloodRequestDetailsID], [BloodRequestID], [WholeBloodUnit], [PackedCellUnit], [FreshFrozenPlasmaUnit], [PlateletComponentsUnit], [SingleDonorPlateletUnit], [CryoPoorPlasmaUnit]) VALUES (N'BBRD00009', N'BBR00012', 12, 0, 0, 0, 0, 0)
GO
INSERT [bbk].[BloodRequestDetails] ([BloodRequestDetailsID], [BloodRequestID], [WholeBloodUnit], [PackedCellUnit], [FreshFrozenPlasmaUnit], [PlateletComponentsUnit], [SingleDonorPlateletUnit], [CryoPoorPlasmaUnit]) VALUES (N'BBRD00010', N'BBR00013', 1, 23, 0, 0, 0, 0)
GO
INSERT [bbk].[BloodRequestDetails] ([BloodRequestDetailsID], [BloodRequestID], [WholeBloodUnit], [PackedCellUnit], [FreshFrozenPlasmaUnit], [PlateletComponentsUnit], [SingleDonorPlateletUnit], [CryoPoorPlasmaUnit]) VALUES (N'BBRD00011', N'BBR00014', 123, 0, 0, 0, 0, 0)
GO
INSERT [bbk].[BloodRequestDetails] ([BloodRequestDetailsID], [BloodRequestID], [WholeBloodUnit], [PackedCellUnit], [FreshFrozenPlasmaUnit], [PlateletComponentsUnit], [SingleDonorPlateletUnit], [CryoPoorPlasmaUnit]) VALUES (N'BBRD00012', N'BBR00015', 456, 0, 0, 0, 0, 0)
GO
INSERT [bbk].[Doctors] ([DoctorID], [FullName], [UserName], [Password], [Email], [PhoneNumber], [BloodBankCentreID], [Specialty], [LicenseNumber], [LicenseExpirationDate], [DateOfBirth], [Gender], [Address]) VALUES (N'BBD00001', N'Himesh Panchalingam', N'himesh', N'TBai1sKZ/7lujXMRFF58Cw==', N'himeshpanchalingam20@gmail.com', N'1234567890', N'BBKC00001', N'PA', N'5678', CAST(N'2023-06-30' AS Date), CAST(N'1980-01-01' AS Date), N'M', N'123 Main St, Anytown Kurunegala')
GO
INSERT [bbk].[Doctors] ([DoctorID], [FullName], [UserName], [Password], [Email], [PhoneNumber], [BloodBankCentreID], [Specialty], [LicenseNumber], [LicenseExpirationDate], [DateOfBirth], [Gender], [Address]) VALUES (N'BBD00004', N'Dushman Panchalingam', N'dush', N'TBai1sKZ/7lujXMRFF58Cw==', N'dushmanp123@gmail.com', N'0764817070', N'BBKC00001', N'AN', N'123456789', CAST(N'2023-04-12' AS Date), CAST(N'2023-04-01' AS Date), N'M', N'no.55,vijaya mw samanpura, Dambulla rd, KUR')
GO
INSERT [bbk].[Doctors] ([DoctorID], [FullName], [UserName], [Password], [Email], [PhoneNumber], [BloodBankCentreID], [Specialty], [LicenseNumber], [LicenseExpirationDate], [DateOfBirth], [Gender], [Address]) VALUES (N'BBD00005', N'FD', N'FF', N'0CFyLHk0ie7TuAsoY35YfiJNBiSZwnRAkIvE+zxKGi5XzVRulgySRPbJmM3vAgNq', N'dushmanp@gmail.com', N'0987654321', N'BBKC00001', N'PA', N'56789', CAST(N'2023-04-30' AS Date), CAST(N'2023-04-01' AS Date), N'M', N'123')
GO
INSERT [bbk].[Location] ([LocationID], [LocationName]) VALUES (N'BBKL00001', N'Colombo')
GO
INSERT [bbk].[Location] ([LocationID], [LocationName]) VALUES (N'BBKL00002', N'Kandy')
GO
INSERT [bbk].[Location] ([LocationID], [LocationName]) VALUES (N'BBKL00003', N'Galle')
GO
INSERT [bbk].[Location] ([LocationID], [LocationName]) VALUES (N'BBKL00004', N'Jaffna')
GO
INSERT [bbk].[Location] ([LocationID], [LocationName]) VALUES (N'BBKL00005', N'Matara')
GO
INSERT [bbk].[Location] ([LocationID], [LocationName]) VALUES (N'BBKL00006', N'Anuradhapura')
GO
INSERT [bbk].[Location] ([LocationID], [LocationName]) VALUES (N'BBKL00007', N'Polonnaruwa')
GO
INSERT [bbk].[Location] ([LocationID], [LocationName]) VALUES (N'BBKL00008', N'Trincomalee')
GO
INSERT [bbk].[Location] ([LocationID], [LocationName]) VALUES (N'BBKL00009', N'Negombo')
GO
INSERT [bbk].[Location] ([LocationID], [LocationName]) VALUES (N'BBKL00010', N'Kurunegala')
GO
INSERT [bbk].[OutHospital] ([HospitalID], [HospitalName], [Email], [PhoneNumber], [Address], [Username], [Password], [ApprovedBy], [LocationID]) VALUES (N'OTH00013', N'Coperative hosiptal', N'dushmanp@gmail.com', N'0764817070', N'we', N'cop', N'TBai1sKZ/7lujXMRFF58Cw==', N'BBKC00001', N'BBKL00006')
GO
INSERT [dnr].[BloodRecord] ([BloodRecordID], [BloodBankCentreID], [DonationID], [ProcessedDate], [ExpirationDate], [Location]) VALUES (N'DBR00009', N'BBKC00001', N'DDR00032', CAST(N'2023-04-27' AS Date), CAST(N'2023-05-12' AS Date), N'BBKL00006')
GO
INSERT [dnr].[BloodRecord] ([BloodRecordID], [BloodBankCentreID], [DonationID], [ProcessedDate], [ExpirationDate], [Location]) VALUES (N'DBR00010', N'BBKC00001', N'DDR00034', CAST(N'2023-04-29' AS Date), CAST(N'1900-01-01' AS Date), N'')
GO
INSERT [dnr].[BloodRecord] ([BloodRecordID], [BloodBankCentreID], [DonationID], [ProcessedDate], [ExpirationDate], [Location]) VALUES (N'DBR00011', N'BBKC00001', N'DDR00034', CAST(N'2023-04-29' AS Date), CAST(N'2023-04-01' AS Date), N'BBKL00006')
GO
INSERT [dnr].[BloodRecord] ([BloodRecordID], [BloodBankCentreID], [DonationID], [ProcessedDate], [ExpirationDate], [Location]) VALUES (N'DBR00012', N'BBKC00001', N'DDR00030', CAST(N'2023-04-29' AS Date), CAST(N'2023-04-01' AS Date), N'')
GO
INSERT [dnr].[BloodRecord] ([BloodRecordID], [BloodBankCentreID], [DonationID], [ProcessedDate], [ExpirationDate], [Location]) VALUES (N'DBR00013', N'BBKC00001', N'DDR00035', CAST(N'2023-05-01' AS Date), CAST(N'2023-05-02' AS Date), N'BBKL00006')
GO
INSERT [dnr].[DonarDonation] ([DonotionID], [DonorID], [BloodBankCentreID], [DonationDate], [QuestionnaireID], [DoctorID], [Examination], [Pulse], [BP], [HBLevel], [Weight], [Remark], [NextDonationDate], [BloodBagNo], [Status], [RemarkRejected], [FeedBack]) VALUES (N'DDR00030', N'DNR00001', N'BBKC00002', CAST(N'2023-04-23' AS Date), N'DRQ00031', N'BBD00001', N'NA', 56, N'129/56', 13, 56, N'NO ANY SYMTHOM', CAST(N'2023-08-26T20:06:39.9666667' AS DateTime2), N'67', N'C', N'', N'sdss')
GO
INSERT [dnr].[DonarDonation] ([DonotionID], [DonorID], [BloodBankCentreID], [DonationDate], [QuestionnaireID], [DoctorID], [Examination], [Pulse], [BP], [HBLevel], [Weight], [Remark], [NextDonationDate], [BloodBagNo], [Status], [RemarkRejected], [FeedBack]) VALUES (N'DDR00031', N'DNR00001', N'BBKC00002', CAST(N'2023-04-24' AS Date), N'DRQ00032', N'BBD00004', N'NA', 56, N'120/34', 12.699999809265137, 56, N'sdfsdf', CAST(N'1900-01-01T00:00:00.0000000' AS DateTime2), N'', N'DD', N'Donation rejected due to Hemoglobin level (minimum 12.5 g/dL for women and 13.0 g/dL for men, maximum 20 g/dL). ', N'')
GO
INSERT [dnr].[DonarDonation] ([DonotionID], [DonorID], [BloodBankCentreID], [DonationDate], [QuestionnaireID], [DoctorID], [Examination], [Pulse], [BP], [HBLevel], [Weight], [Remark], [NextDonationDate], [BloodBagNo], [Status], [RemarkRejected], [FeedBack]) VALUES (N'DDR00032', N'DNR00001', N'BBKC00002', CAST(N'2023-04-26' AS Date), N'DRQ00033', N'BBD00001', N'NA', 50, N'156/45', 14, 56, N'ERT', CAST(N'2023-04-27T12:45:32.6000000' AS DateTime2), N'234', N'C', N'', N'')
GO
INSERT [dnr].[DonarDonation] ([DonotionID], [DonorID], [BloodBankCentreID], [DonationDate], [QuestionnaireID], [DoctorID], [Examination], [Pulse], [BP], [HBLevel], [Weight], [Remark], [NextDonationDate], [BloodBagNo], [Status], [RemarkRejected], [FeedBack]) VALUES (N'DDR00033', N'DNR00001', N'BBKC00002', CAST(N'2023-04-27' AS Date), N'DRQ00034', N'', N'', 0, N'', 0, 0, N'', CAST(N'1900-01-01T00:00:00.0000000' AS DateTime2), N'', N'NE', N'We regret to inform you that you are currently unable to donate blood today due to health reasons.', N'')
GO
INSERT [dnr].[DonarDonation] ([DonotionID], [DonorID], [BloodBankCentreID], [DonationDate], [QuestionnaireID], [DoctorID], [Examination], [Pulse], [BP], [HBLevel], [Weight], [Remark], [NextDonationDate], [BloodBagNo], [Status], [RemarkRejected], [FeedBack]) VALUES (N'DDR00034', N'DNR00001', N'BBKC00002', CAST(N'2023-04-27' AS Date), N'DRQ00035', N'BBD00001', N'NA', 56, N'120/45', 13.5, 56, N'dgdfg', CAST(N'2023-08-27T14:11:13.5533333' AS DateTime2), N'234', N'C', N'', N'')
GO
INSERT [dnr].[DonarDonation] ([DonotionID], [DonorID], [BloodBankCentreID], [DonationDate], [QuestionnaireID], [DoctorID], [Examination], [Pulse], [BP], [HBLevel], [Weight], [Remark], [NextDonationDate], [BloodBagNo], [Status], [RemarkRejected], [FeedBack]) VALUES (N'DDR00035', N'DNR00001', N'BBKC00002', CAST(N'2023-04-29' AS Date), N'DRQ00036', N'BBD00001', N'NA', 50, N'145/45', 13.600000381469727, 56, N'dfgdfgvxd', CAST(N'2023-09-01T17:00:20.1566667' AS DateTime2), N'23', N'C', N'', N'')
GO
INSERT [dnr].[DonarDonation] ([DonotionID], [DonorID], [BloodBankCentreID], [DonationDate], [QuestionnaireID], [DoctorID], [Examination], [Pulse], [BP], [HBLevel], [Weight], [Remark], [NextDonationDate], [BloodBagNo], [Status], [RemarkRejected], [FeedBack]) VALUES (N'DDR00036', N'DNR00001', N'BBKC00002', CAST(N'2023-05-01' AS Date), N'DRQ00037', N'BBD00004', N'', 0, N'', 0, 0, N'', CAST(N'1900-01-01T00:00:00.0000000' AS DateTime2), N'', N'AD', N'', N'')
GO
INSERT [dnr].[Donor] ([DonorID], [Name], [NIC], [Email], [Password], [PhoneNumber], [OtherPhoneNumber], [DonationFrequency], [Occupation], [MaritalStatus], [Address], [DateOfBirth], [Location], [Gender], [BloodType]) VALUES (N'DNR00001', N'Dushman', N'123456789', N'dushmanp123@gmail.com', N'TBai1sKZ/7lujXMRFF58Cw==', N'0764817070', N'', 4, N'IT', N'S', N'sdvsdvsd', CAST(N'1998-02-01' AS Date), N'fdgdd', N'M', N'O+')
GO
INSERT [dnr].[Donor] ([DonorID], [Name], [NIC], [Email], [Password], [PhoneNumber], [OtherPhoneNumber], [DonationFrequency], [Occupation], [MaritalStatus], [Address], [DateOfBirth], [Location], [Gender], [BloodType]) VALUES (N'DNR00002', N'Dushman12', N'12345678912', N'dushmanp@gmail.com', N'orPutCIDAz/P9cOJTRF0hQ==', N'0755120770', N'', 4, N'IT', N'S', N'sdvsdvsd', CAST(N'1998-02-01' AS Date), N'fdgdd', N'M', N'O+')
GO
INSERT [dnr].[Donor] ([DonorID], [Name], [NIC], [Email], [Password], [PhoneNumber], [OtherPhoneNumber], [DonationFrequency], [Occupation], [MaritalStatus], [Address], [DateOfBirth], [Location], [Gender], [BloodType]) VALUES (N'DNR00003', N'dushman', N'12345678923', N'dushmanp1@gmail.com', N'TBai1sKZ/7lujXMRFF58Cw==', N'456789006756', N'', 4, N'FN', N'S', N'1', CAST(N'1998-04-14' AS Date), N'', N'M', N'')
GO
INSERT [dnr].[DonorQuestionnaire] ([QuestionnaireID], [Q1Prob], [Q1Doctor], [Q1Health], [Q2medCond], [Q3Medication], [Q4Surgery], [Q5Heavywork], [Q6Pregnant], [Q7YellowFever], [Q7TbTyphoid], [Q7Treated], [Q8Immunization], [Q8TattooAcupuncture], [Q8Abroad], [Q8Prison], [Q8Blood], [Q8Malaria], [Q9Dengue], [Q9Fever], [Q9Teeth], [Q10categories], [Q11PartnerCategory], [Q12Symptoms]) VALUES (N'DRQ00002', 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
GO
INSERT [dnr].[DonorQuestionnaire] ([QuestionnaireID], [Q1Prob], [Q1Doctor], [Q1Health], [Q2medCond], [Q3Medication], [Q4Surgery], [Q5Heavywork], [Q6Pregnant], [Q7YellowFever], [Q7TbTyphoid], [Q7Treated], [Q8Immunization], [Q8TattooAcupuncture], [Q8Abroad], [Q8Prison], [Q8Blood], [Q8Malaria], [Q9Dengue], [Q9Fever], [Q9Teeth], [Q10categories], [Q11PartnerCategory], [Q12Symptoms]) VALUES (N'DRQ00003', 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
GO
INSERT [dnr].[DonorQuestionnaire] ([QuestionnaireID], [Q1Prob], [Q1Doctor], [Q1Health], [Q2medCond], [Q3Medication], [Q4Surgery], [Q5Heavywork], [Q6Pregnant], [Q7YellowFever], [Q7TbTyphoid], [Q7Treated], [Q8Immunization], [Q8TattooAcupuncture], [Q8Abroad], [Q8Prison], [Q8Blood], [Q8Malaria], [Q9Dengue], [Q9Fever], [Q9Teeth], [Q10categories], [Q11PartnerCategory], [Q12Symptoms]) VALUES (N'DRQ00004', 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
GO
INSERT [dnr].[DonorQuestionnaire] ([QuestionnaireID], [Q1Prob], [Q1Doctor], [Q1Health], [Q2medCond], [Q3Medication], [Q4Surgery], [Q5Heavywork], [Q6Pregnant], [Q7YellowFever], [Q7TbTyphoid], [Q7Treated], [Q8Immunization], [Q8TattooAcupuncture], [Q8Abroad], [Q8Prison], [Q8Blood], [Q8Malaria], [Q9Dengue], [Q9Fever], [Q9Teeth], [Q10categories], [Q11PartnerCategory], [Q12Symptoms]) VALUES (N'DRQ00005', 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
GO
INSERT [dnr].[DonorQuestionnaire] ([QuestionnaireID], [Q1Prob], [Q1Doctor], [Q1Health], [Q2medCond], [Q3Medication], [Q4Surgery], [Q5Heavywork], [Q6Pregnant], [Q7YellowFever], [Q7TbTyphoid], [Q7Treated], [Q8Immunization], [Q8TattooAcupuncture], [Q8Abroad], [Q8Prison], [Q8Blood], [Q8Malaria], [Q9Dengue], [Q9Fever], [Q9Teeth], [Q10categories], [Q11PartnerCategory], [Q12Symptoms]) VALUES (N'DRQ00006', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
GO
INSERT [dnr].[DonorQuestionnaire] ([QuestionnaireID], [Q1Prob], [Q1Doctor], [Q1Health], [Q2medCond], [Q3Medication], [Q4Surgery], [Q5Heavywork], [Q6Pregnant], [Q7YellowFever], [Q7TbTyphoid], [Q7Treated], [Q8Immunization], [Q8TattooAcupuncture], [Q8Abroad], [Q8Prison], [Q8Blood], [Q8Malaria], [Q9Dengue], [Q9Fever], [Q9Teeth], [Q10categories], [Q11PartnerCategory], [Q12Symptoms]) VALUES (N'DRQ00007', 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
GO
INSERT [dnr].[DonorQuestionnaire] ([QuestionnaireID], [Q1Prob], [Q1Doctor], [Q1Health], [Q2medCond], [Q3Medication], [Q4Surgery], [Q5Heavywork], [Q6Pregnant], [Q7YellowFever], [Q7TbTyphoid], [Q7Treated], [Q8Immunization], [Q8TattooAcupuncture], [Q8Abroad], [Q8Prison], [Q8Blood], [Q8Malaria], [Q9Dengue], [Q9Fever], [Q9Teeth], [Q10categories], [Q11PartnerCategory], [Q12Symptoms]) VALUES (N'DRQ00008', 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
GO
INSERT [dnr].[DonorQuestionnaire] ([QuestionnaireID], [Q1Prob], [Q1Doctor], [Q1Health], [Q2medCond], [Q3Medication], [Q4Surgery], [Q5Heavywork], [Q6Pregnant], [Q7YellowFever], [Q7TbTyphoid], [Q7Treated], [Q8Immunization], [Q8TattooAcupuncture], [Q8Abroad], [Q8Prison], [Q8Blood], [Q8Malaria], [Q9Dengue], [Q9Fever], [Q9Teeth], [Q10categories], [Q11PartnerCategory], [Q12Symptoms]) VALUES (N'DRQ00009', 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
GO
INSERT [dnr].[DonorQuestionnaire] ([QuestionnaireID], [Q1Prob], [Q1Doctor], [Q1Health], [Q2medCond], [Q3Medication], [Q4Surgery], [Q5Heavywork], [Q6Pregnant], [Q7YellowFever], [Q7TbTyphoid], [Q7Treated], [Q8Immunization], [Q8TattooAcupuncture], [Q8Abroad], [Q8Prison], [Q8Blood], [Q8Malaria], [Q9Dengue], [Q9Fever], [Q9Teeth], [Q10categories], [Q11PartnerCategory], [Q12Symptoms]) VALUES (N'DRQ00010', 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
GO
INSERT [dnr].[DonorQuestionnaire] ([QuestionnaireID], [Q1Prob], [Q1Doctor], [Q1Health], [Q2medCond], [Q3Medication], [Q4Surgery], [Q5Heavywork], [Q6Pregnant], [Q7YellowFever], [Q7TbTyphoid], [Q7Treated], [Q8Immunization], [Q8TattooAcupuncture], [Q8Abroad], [Q8Prison], [Q8Blood], [Q8Malaria], [Q9Dengue], [Q9Fever], [Q9Teeth], [Q10categories], [Q11PartnerCategory], [Q12Symptoms]) VALUES (N'DRQ00011', 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
GO
INSERT [dnr].[DonorQuestionnaire] ([QuestionnaireID], [Q1Prob], [Q1Doctor], [Q1Health], [Q2medCond], [Q3Medication], [Q4Surgery], [Q5Heavywork], [Q6Pregnant], [Q7YellowFever], [Q7TbTyphoid], [Q7Treated], [Q8Immunization], [Q8TattooAcupuncture], [Q8Abroad], [Q8Prison], [Q8Blood], [Q8Malaria], [Q9Dengue], [Q9Fever], [Q9Teeth], [Q10categories], [Q11PartnerCategory], [Q12Symptoms]) VALUES (N'DRQ00012', 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
GO
INSERT [dnr].[DonorQuestionnaire] ([QuestionnaireID], [Q1Prob], [Q1Doctor], [Q1Health], [Q2medCond], [Q3Medication], [Q4Surgery], [Q5Heavywork], [Q6Pregnant], [Q7YellowFever], [Q7TbTyphoid], [Q7Treated], [Q8Immunization], [Q8TattooAcupuncture], [Q8Abroad], [Q8Prison], [Q8Blood], [Q8Malaria], [Q9Dengue], [Q9Fever], [Q9Teeth], [Q10categories], [Q11PartnerCategory], [Q12Symptoms]) VALUES (N'DRQ00013', 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
GO
INSERT [dnr].[DonorQuestionnaire] ([QuestionnaireID], [Q1Prob], [Q1Doctor], [Q1Health], [Q2medCond], [Q3Medication], [Q4Surgery], [Q5Heavywork], [Q6Pregnant], [Q7YellowFever], [Q7TbTyphoid], [Q7Treated], [Q8Immunization], [Q8TattooAcupuncture], [Q8Abroad], [Q8Prison], [Q8Blood], [Q8Malaria], [Q9Dengue], [Q9Fever], [Q9Teeth], [Q10categories], [Q11PartnerCategory], [Q12Symptoms]) VALUES (N'DRQ00014', 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
GO
INSERT [dnr].[DonorQuestionnaire] ([QuestionnaireID], [Q1Prob], [Q1Doctor], [Q1Health], [Q2medCond], [Q3Medication], [Q4Surgery], [Q5Heavywork], [Q6Pregnant], [Q7YellowFever], [Q7TbTyphoid], [Q7Treated], [Q8Immunization], [Q8TattooAcupuncture], [Q8Abroad], [Q8Prison], [Q8Blood], [Q8Malaria], [Q9Dengue], [Q9Fever], [Q9Teeth], [Q10categories], [Q11PartnerCategory], [Q12Symptoms]) VALUES (N'DRQ00015', 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
GO
INSERT [dnr].[DonorQuestionnaire] ([QuestionnaireID], [Q1Prob], [Q1Doctor], [Q1Health], [Q2medCond], [Q3Medication], [Q4Surgery], [Q5Heavywork], [Q6Pregnant], [Q7YellowFever], [Q7TbTyphoid], [Q7Treated], [Q8Immunization], [Q8TattooAcupuncture], [Q8Abroad], [Q8Prison], [Q8Blood], [Q8Malaria], [Q9Dengue], [Q9Fever], [Q9Teeth], [Q10categories], [Q11PartnerCategory], [Q12Symptoms]) VALUES (N'DRQ00016', 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
GO
INSERT [dnr].[DonorQuestionnaire] ([QuestionnaireID], [Q1Prob], [Q1Doctor], [Q1Health], [Q2medCond], [Q3Medication], [Q4Surgery], [Q5Heavywork], [Q6Pregnant], [Q7YellowFever], [Q7TbTyphoid], [Q7Treated], [Q8Immunization], [Q8TattooAcupuncture], [Q8Abroad], [Q8Prison], [Q8Blood], [Q8Malaria], [Q9Dengue], [Q9Fever], [Q9Teeth], [Q10categories], [Q11PartnerCategory], [Q12Symptoms]) VALUES (N'DRQ00017', 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
GO
INSERT [dnr].[DonorQuestionnaire] ([QuestionnaireID], [Q1Prob], [Q1Doctor], [Q1Health], [Q2medCond], [Q3Medication], [Q4Surgery], [Q5Heavywork], [Q6Pregnant], [Q7YellowFever], [Q7TbTyphoid], [Q7Treated], [Q8Immunization], [Q8TattooAcupuncture], [Q8Abroad], [Q8Prison], [Q8Blood], [Q8Malaria], [Q9Dengue], [Q9Fever], [Q9Teeth], [Q10categories], [Q11PartnerCategory], [Q12Symptoms]) VALUES (N'DRQ00018', 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
GO
INSERT [dnr].[DonorQuestionnaire] ([QuestionnaireID], [Q1Prob], [Q1Doctor], [Q1Health], [Q2medCond], [Q3Medication], [Q4Surgery], [Q5Heavywork], [Q6Pregnant], [Q7YellowFever], [Q7TbTyphoid], [Q7Treated], [Q8Immunization], [Q8TattooAcupuncture], [Q8Abroad], [Q8Prison], [Q8Blood], [Q8Malaria], [Q9Dengue], [Q9Fever], [Q9Teeth], [Q10categories], [Q11PartnerCategory], [Q12Symptoms]) VALUES (N'DRQ00019', 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
GO
INSERT [dnr].[DonorQuestionnaire] ([QuestionnaireID], [Q1Prob], [Q1Doctor], [Q1Health], [Q2medCond], [Q3Medication], [Q4Surgery], [Q5Heavywork], [Q6Pregnant], [Q7YellowFever], [Q7TbTyphoid], [Q7Treated], [Q8Immunization], [Q8TattooAcupuncture], [Q8Abroad], [Q8Prison], [Q8Blood], [Q8Malaria], [Q9Dengue], [Q9Fever], [Q9Teeth], [Q10categories], [Q11PartnerCategory], [Q12Symptoms]) VALUES (N'DRQ00020', 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
GO
INSERT [dnr].[DonorQuestionnaire] ([QuestionnaireID], [Q1Prob], [Q1Doctor], [Q1Health], [Q2medCond], [Q3Medication], [Q4Surgery], [Q5Heavywork], [Q6Pregnant], [Q7YellowFever], [Q7TbTyphoid], [Q7Treated], [Q8Immunization], [Q8TattooAcupuncture], [Q8Abroad], [Q8Prison], [Q8Blood], [Q8Malaria], [Q9Dengue], [Q9Fever], [Q9Teeth], [Q10categories], [Q11PartnerCategory], [Q12Symptoms]) VALUES (N'DRQ00021', 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
GO
INSERT [dnr].[DonorQuestionnaire] ([QuestionnaireID], [Q1Prob], [Q1Doctor], [Q1Health], [Q2medCond], [Q3Medication], [Q4Surgery], [Q5Heavywork], [Q6Pregnant], [Q7YellowFever], [Q7TbTyphoid], [Q7Treated], [Q8Immunization], [Q8TattooAcupuncture], [Q8Abroad], [Q8Prison], [Q8Blood], [Q8Malaria], [Q9Dengue], [Q9Fever], [Q9Teeth], [Q10categories], [Q11PartnerCategory], [Q12Symptoms]) VALUES (N'DRQ00022', 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
GO
INSERT [dnr].[DonorQuestionnaire] ([QuestionnaireID], [Q1Prob], [Q1Doctor], [Q1Health], [Q2medCond], [Q3Medication], [Q4Surgery], [Q5Heavywork], [Q6Pregnant], [Q7YellowFever], [Q7TbTyphoid], [Q7Treated], [Q8Immunization], [Q8TattooAcupuncture], [Q8Abroad], [Q8Prison], [Q8Blood], [Q8Malaria], [Q9Dengue], [Q9Fever], [Q9Teeth], [Q10categories], [Q11PartnerCategory], [Q12Symptoms]) VALUES (N'DRQ00023', 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
GO
INSERT [dnr].[DonorQuestionnaire] ([QuestionnaireID], [Q1Prob], [Q1Doctor], [Q1Health], [Q2medCond], [Q3Medication], [Q4Surgery], [Q5Heavywork], [Q6Pregnant], [Q7YellowFever], [Q7TbTyphoid], [Q7Treated], [Q8Immunization], [Q8TattooAcupuncture], [Q8Abroad], [Q8Prison], [Q8Blood], [Q8Malaria], [Q9Dengue], [Q9Fever], [Q9Teeth], [Q10categories], [Q11PartnerCategory], [Q12Symptoms]) VALUES (N'DRQ00024', 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
GO
INSERT [dnr].[DonorQuestionnaire] ([QuestionnaireID], [Q1Prob], [Q1Doctor], [Q1Health], [Q2medCond], [Q3Medication], [Q4Surgery], [Q5Heavywork], [Q6Pregnant], [Q7YellowFever], [Q7TbTyphoid], [Q7Treated], [Q8Immunization], [Q8TattooAcupuncture], [Q8Abroad], [Q8Prison], [Q8Blood], [Q8Malaria], [Q9Dengue], [Q9Fever], [Q9Teeth], [Q10categories], [Q11PartnerCategory], [Q12Symptoms]) VALUES (N'DRQ00025', 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
GO
INSERT [dnr].[DonorQuestionnaire] ([QuestionnaireID], [Q1Prob], [Q1Doctor], [Q1Health], [Q2medCond], [Q3Medication], [Q4Surgery], [Q5Heavywork], [Q6Pregnant], [Q7YellowFever], [Q7TbTyphoid], [Q7Treated], [Q8Immunization], [Q8TattooAcupuncture], [Q8Abroad], [Q8Prison], [Q8Blood], [Q8Malaria], [Q9Dengue], [Q9Fever], [Q9Teeth], [Q10categories], [Q11PartnerCategory], [Q12Symptoms]) VALUES (N'DRQ00026', 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
GO
INSERT [dnr].[DonorQuestionnaire] ([QuestionnaireID], [Q1Prob], [Q1Doctor], [Q1Health], [Q2medCond], [Q3Medication], [Q4Surgery], [Q5Heavywork], [Q6Pregnant], [Q7YellowFever], [Q7TbTyphoid], [Q7Treated], [Q8Immunization], [Q8TattooAcupuncture], [Q8Abroad], [Q8Prison], [Q8Blood], [Q8Malaria], [Q9Dengue], [Q9Fever], [Q9Teeth], [Q10categories], [Q11PartnerCategory], [Q12Symptoms]) VALUES (N'DRQ00027', 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
GO
INSERT [dnr].[DonorQuestionnaire] ([QuestionnaireID], [Q1Prob], [Q1Doctor], [Q1Health], [Q2medCond], [Q3Medication], [Q4Surgery], [Q5Heavywork], [Q6Pregnant], [Q7YellowFever], [Q7TbTyphoid], [Q7Treated], [Q8Immunization], [Q8TattooAcupuncture], [Q8Abroad], [Q8Prison], [Q8Blood], [Q8Malaria], [Q9Dengue], [Q9Fever], [Q9Teeth], [Q10categories], [Q11PartnerCategory], [Q12Symptoms]) VALUES (N'DRQ00028', 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
GO
INSERT [dnr].[DonorQuestionnaire] ([QuestionnaireID], [Q1Prob], [Q1Doctor], [Q1Health], [Q2medCond], [Q3Medication], [Q4Surgery], [Q5Heavywork], [Q6Pregnant], [Q7YellowFever], [Q7TbTyphoid], [Q7Treated], [Q8Immunization], [Q8TattooAcupuncture], [Q8Abroad], [Q8Prison], [Q8Blood], [Q8Malaria], [Q9Dengue], [Q9Fever], [Q9Teeth], [Q10categories], [Q11PartnerCategory], [Q12Symptoms]) VALUES (N'DRQ00029', 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
GO
INSERT [dnr].[DonorQuestionnaire] ([QuestionnaireID], [Q1Prob], [Q1Doctor], [Q1Health], [Q2medCond], [Q3Medication], [Q4Surgery], [Q5Heavywork], [Q6Pregnant], [Q7YellowFever], [Q7TbTyphoid], [Q7Treated], [Q8Immunization], [Q8TattooAcupuncture], [Q8Abroad], [Q8Prison], [Q8Blood], [Q8Malaria], [Q9Dengue], [Q9Fever], [Q9Teeth], [Q10categories], [Q11PartnerCategory], [Q12Symptoms]) VALUES (N'DRQ00030', 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
GO
INSERT [dnr].[DonorQuestionnaire] ([QuestionnaireID], [Q1Prob], [Q1Doctor], [Q1Health], [Q2medCond], [Q3Medication], [Q4Surgery], [Q5Heavywork], [Q6Pregnant], [Q7YellowFever], [Q7TbTyphoid], [Q7Treated], [Q8Immunization], [Q8TattooAcupuncture], [Q8Abroad], [Q8Prison], [Q8Blood], [Q8Malaria], [Q9Dengue], [Q9Fever], [Q9Teeth], [Q10categories], [Q11PartnerCategory], [Q12Symptoms]) VALUES (N'DRQ00031', 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
GO
INSERT [dnr].[DonorQuestionnaire] ([QuestionnaireID], [Q1Prob], [Q1Doctor], [Q1Health], [Q2medCond], [Q3Medication], [Q4Surgery], [Q5Heavywork], [Q6Pregnant], [Q7YellowFever], [Q7TbTyphoid], [Q7Treated], [Q8Immunization], [Q8TattooAcupuncture], [Q8Abroad], [Q8Prison], [Q8Blood], [Q8Malaria], [Q9Dengue], [Q9Fever], [Q9Teeth], [Q10categories], [Q11PartnerCategory], [Q12Symptoms]) VALUES (N'DRQ00032', 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
GO
INSERT [dnr].[DonorQuestionnaire] ([QuestionnaireID], [Q1Prob], [Q1Doctor], [Q1Health], [Q2medCond], [Q3Medication], [Q4Surgery], [Q5Heavywork], [Q6Pregnant], [Q7YellowFever], [Q7TbTyphoid], [Q7Treated], [Q8Immunization], [Q8TattooAcupuncture], [Q8Abroad], [Q8Prison], [Q8Blood], [Q8Malaria], [Q9Dengue], [Q9Fever], [Q9Teeth], [Q10categories], [Q11PartnerCategory], [Q12Symptoms]) VALUES (N'DRQ00033', 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
GO
INSERT [dnr].[DonorQuestionnaire] ([QuestionnaireID], [Q1Prob], [Q1Doctor], [Q1Health], [Q2medCond], [Q3Medication], [Q4Surgery], [Q5Heavywork], [Q6Pregnant], [Q7YellowFever], [Q7TbTyphoid], [Q7Treated], [Q8Immunization], [Q8TattooAcupuncture], [Q8Abroad], [Q8Prison], [Q8Blood], [Q8Malaria], [Q9Dengue], [Q9Fever], [Q9Teeth], [Q10categories], [Q11PartnerCategory], [Q12Symptoms]) VALUES (N'DRQ00034', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
GO
INSERT [dnr].[DonorQuestionnaire] ([QuestionnaireID], [Q1Prob], [Q1Doctor], [Q1Health], [Q2medCond], [Q3Medication], [Q4Surgery], [Q5Heavywork], [Q6Pregnant], [Q7YellowFever], [Q7TbTyphoid], [Q7Treated], [Q8Immunization], [Q8TattooAcupuncture], [Q8Abroad], [Q8Prison], [Q8Blood], [Q8Malaria], [Q9Dengue], [Q9Fever], [Q9Teeth], [Q10categories], [Q11PartnerCategory], [Q12Symptoms]) VALUES (N'DRQ00035', 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
GO
INSERT [dnr].[DonorQuestionnaire] ([QuestionnaireID], [Q1Prob], [Q1Doctor], [Q1Health], [Q2medCond], [Q3Medication], [Q4Surgery], [Q5Heavywork], [Q6Pregnant], [Q7YellowFever], [Q7TbTyphoid], [Q7Treated], [Q8Immunization], [Q8TattooAcupuncture], [Q8Abroad], [Q8Prison], [Q8Blood], [Q8Malaria], [Q9Dengue], [Q9Fever], [Q9Teeth], [Q10categories], [Q11PartnerCategory], [Q12Symptoms]) VALUES (N'DRQ00036', 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
GO
INSERT [dnr].[DonorQuestionnaire] ([QuestionnaireID], [Q1Prob], [Q1Doctor], [Q1Health], [Q2medCond], [Q3Medication], [Q4Surgery], [Q5Heavywork], [Q6Pregnant], [Q7YellowFever], [Q7TbTyphoid], [Q7Treated], [Q8Immunization], [Q8TattooAcupuncture], [Q8Abroad], [Q8Prison], [Q8Blood], [Q8Malaria], [Q9Dengue], [Q9Fever], [Q9Teeth], [Q10categories], [Q11PartnerCategory], [Q12Symptoms]) VALUES (N'DRQ00037', 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
GO
INSERT [dnr].[TestRecord] ([TestID], [DonationID], [HemoglobinLevel], [PlateletLevel], [HIVTestResult], [WhiteBloodCellCount], [DiseaseOrVirus], [TestRecordPdfFile]) VALUES (N'DTR00010', N'DDR00032', CAST(123.00 AS Decimal(5, 2)), CAST(567.00 AS Decimal(5, 2)), N'NA', 12, N'Negative', N'20230427-6097-DDR00032.pdf')
GO
INSERT [dnr].[TestRecord] ([TestID], [DonationID], [HemoglobinLevel], [PlateletLevel], [HIVTestResult], [WhiteBloodCellCount], [DiseaseOrVirus], [TestRecordPdfFile]) VALUES (N'DTR00011', N'DDR00030', CAST(123.00 AS Decimal(5, 2)), CAST(234.00 AS Decimal(5, 2)), N'NA', 1, N'Negative', N'20230429-2546-DDR00030.pdf')
GO
INSERT [dnr].[TestRecord] ([TestID], [DonationID], [HemoglobinLevel], [PlateletLevel], [HIVTestResult], [WhiteBloodCellCount], [DiseaseOrVirus], [TestRecordPdfFile]) VALUES (N'DTR00012', N'DDR00035', CAST(123.00 AS Decimal(5, 2)), CAST(567.00 AS Decimal(5, 2)), N'NA', 34, N'Negative', N'20230501-9816-DDR00035.pdf')
GO
ALTER TABLE [adm].[NumberFormat] ADD  CONSTRAINT [DF_NumberConfiguration_Length]  DEFAULT ((0)) FOR [NumberLength]
GO
/****** Object:  StoredProcedure [adm].[APIKey_AddEdit]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   Procedure [adm].[APIKey_AddEdit]
(
	@KeyID	  varchar(50),
	@KeyDetails	  varchar(100),
	@ActiveStatus varchar(50),

	@RetValue varchar(50) = '' OUT
)	
As
Begin
	SET NOCOUNT ON

	BEGIN TRY
		BEGIN TRANSACTION


		IF @KeyID = ''
		BEGIN

			-- Get next primary key
			DECLARE @PrimaryKey Varchar(50)
			exec adm.NumberFormat_Get 'adm.APIKey','KeyID', @PrimaryKey OUT 

			DECLARE @KeyValue varchar(50) = NEWID();

			WHILE EXISTS(select KeyID from adm.APIKey WHERE KeyValue = @KeyValue)
			BEGIN
				SET @KeyValue = NEWID();
			END

			INSERT INTO adm.APIKey (KeyID, KeyValue, KeyDetails, CreatedDate, ActiveStatus)
				values (@PrimaryKey, @KeyValue, @KeyDetails, adm.GetServerDate(), @ActiveStatus)

			exec adm.NumberFormat_Set 'adm.SystemUser'

			SET @RetValue = @PrimaryKey

		END
		ELSE
		BEGIN
			
			SET @RetValue = @KeyID

			update adm.APIKey SET 
				KeyDetails = @KeyDetails, 
				ActiveStatus = @ActiveStatus
			WHERE KeyID = @KeyID

		END
		
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
        IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
        RAISERROR ('%s. Script: adm.APIKey_AddEdit', 16, 1, @ERROR_MESSAGE);
	END CATCH

End
GO
/****** Object:  StoredProcedure [adm].[APIKey_Count]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   Procedure [adm].[APIKey_Count]
(
	@APIKey	varchar(100),		   
	@KeyW varchar(50) = '',
	@ActiveStatus varchar(50) = ''
)	
As
Begin
	SET NOCOUNT ON
	BEGIN TRY
		
		-- Check for API Key
		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END


		select 	COUNT(*) as RecordCount
		
		from adm.APIKey

		where KeyDetails LIKE '%' + @KeyW + '%'
		AND
		CASE WHEN @ActiveStatus = '' THEN 1
			 WHEN @ActiveStatus <> '' AND ActiveStatus = @ActiveStatus THEN 1
		END = 1

		AND
		CASE WHEN KeyID <> '0000' THEN 1
		END = 1

		
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
		RAISERROR ('%s. Script: adm.APIKey_Count', 16, 1, @ERROR_MESSAGE);
	END CATCH

End
GO
/****** Object:  StoredProcedure [adm].[APIKey_Delete]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   Procedure [adm].[APIKey_Delete]
(
	@APIKey	varchar(100),
	@ID varchar(50),

	@LogUserID varchar(50) = '',
	@RetValue varchar(50) = '' OUT
)	
As
Begin
	SET NOCOUNT ON

	BEGIN TRY
		BEGIN TRANSACTION

		-- Check for API Key
		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END

		-- Check for record
		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyID = @ID)
		BEGIN
			;THROW 50000, 'Record not found', 1;
		END

		IF ( @ID = '0000')
		BEGIN
			;THROW 50000, 'You cannot delete Default App', 1;
		END
		
		SET @RetValue = @ID
		delete from adm.APIKey WHERE KeyID = @ID

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
        IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
        RAISERROR ('%s. Script: adm.APIKey_Delete', 16, 1, @ERROR_MESSAGE);
	END CATCH

End
GO
/****** Object:  StoredProcedure [adm].[APIKey_Get]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   Procedure  [adm].[APIKey_Get]
(
	@APIKey	varchar(100),
	@ID varchar(50)
)	
As
Begin
	SET NOCOUNT ON
	BEGIN TRY
		
		-- Check for API Key
		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END

		select KeyID, KeyValue, KeyDetails, CreatedDate, ActiveStatus
		
		from adm.APIKey

		where KeyID = @ID

		AND
		CASE WHEN KeyID <> '0000' THEN 1
		END = 1
		
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
		RAISERROR ('%s. Script: adm.APIKey_Get', 16, 1, @ERROR_MESSAGE);
	END CATCH

End
GO
/****** Object:  StoredProcedure [adm].[APIKey_List]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   Procedure [adm].[APIKey_List]
(
	@APIKey	varchar(100),		   
	@KeyW varchar(50) = '',
	@ActiveStatus varchar(50) = '',


	@Page int = 0,
	@PageSize int = 99999
)	
As
Begin
	SET NOCOUNT ON
	BEGIN TRY
		
		-- Check for API Key
		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END

		-- Set default value page and page size
		IF @Page = 0 
		BEGIN
			SET @PageSize = 99999
			SET @Page = 1
		END


		select KeyID, KeyValue, KeyDetails, CreatedDate, ActiveStatus
		
		from adm.APIKey 

		where KeyDetails LIKE '%' + @KeyW + '%'
		AND
		CASE WHEN @ActiveStatus = '' THEN 1
			 WHEN @ActiveStatus <> '' AND ActiveStatus = @ActiveStatus THEN 1
		END = 1

		AND
		CASE WHEN KeyID <> '0000' THEN 1
		END = 1
		
		

		ORDER BY KeyID asc

		OFFSET (@PageSize*(@Page-1)) ROWS FETCH NEXT @PageSize ROWS ONLY;
		
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
		RAISERROR ('%s. Script: adm.APIKey_List', 16, 1, @ERROR_MESSAGE);
	END CATCH

End
GO
/****** Object:  StoredProcedure [adm].[APIKey_Validate]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   Procedure [adm].[APIKey_Validate]
(
	@APIKey	varchar(100),
	@RetValue varchar(50) = '' OUT
)	
As
Begin
	SET NOCOUNT ON

	BEGIN TRY
		BEGIN TRANSACTION

		-- Check for API Key
		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END
		
		SET @RetValue = @APIKey
		
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
        IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
        RAISERROR ('%s. Script: APIKey_Validate', 16, 1, @ERROR_MESSAGE);
	END CATCH

End
GO
/****** Object:  StoredProcedure [adm].[EmailSettings_AddEdit]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   Procedure [adm].[EmailSettings_AddEdit]
(
	@APIKey	varchar(100),

	@EmailServer varchar(50), 
	@SenderName varchar(50), 
	@WebURL varchar(500), 
	@SenderEmail varchar(50), 
	@UseAuthentication int, 
	@SenderUsername varchar(50), 
	@SenderPassword varchar(50), 
	@PortNumber int, 
	@UseSSL int,

	@retvalue varchar (MAX) output
)
AS
BEGIN
	SET NOCOUNT ON

	BEGIN TRY
		BEGIN TRANSACTION

		-- Check for API Key
		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END
		
		delete from adm.EmailSettings;

		INSERT INTO adm.EmailSettings (EmailServer, SenderName, WebURL, SenderEmail, UseAuthentication, SenderUsername, SenderPassword, PortNumber, UseSSL)
			VALUES (@EmailServer, @SenderName, @WebURL, @SenderEmail, @UseAuthentication, @SenderUsername, @SenderPassword, @PortNumber, @UseSSL)
				
		SET @RetValue = @EmailServer

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
        IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
        RAISERROR ('%s. Script: adm.EmailSettings_AddEdit', 16, 1, @ERROR_MESSAGE);
	END CATCH

End





GO
/****** Object:  StoredProcedure [adm].[EmailSettings_Get]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   Procedure [adm].[EmailSettings_Get]
(
	@APIKey	varchar(100)
)	
As
Begin
	SET NOCOUNT ON
	BEGIN TRY
		
		-- Check for API Key
		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END

		select TOP 1 EmailServer, SenderName, WebURL, SenderEmail, UseAuthentication, SenderUsername, SenderPassword, PortNumber, UseSSL
		FROM  adm.EmailSettings 
		
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
		RAISERROR ('%s in "EmailSettings_Get"', 16, 1, @ERROR_MESSAGE);
	END CATCH

End
GO
/****** Object:  StoredProcedure [adm].[NumberFormat_Get]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   Procedure [adm].[NumberFormat_Get]
(
	@TableName varchar(50),
	@KeyColumn varchar(50) = '',

	@RetValue varchar(50) = '' OUT
)	
As
Begin
	SET NOCOUNT ON

	BEGIN TRY
		BEGIN TRANSACTION

		DECLARE @PrimaryKey varchar(50), @Prefix varchar(50), @NumberPart BIGINT, @NumberLength int
		DECLARE @DynamicSQL nvarchar(4000), @RecordCount int 

		SELECT @Prefix = Prefix, @NumberPart = NumberPart, @NumberLength = NumberLength from adm.NumberFormat
			WHERE TableName = @TableName

		IF @Prefix IS NULL
			BEGIN
				DECLARE @NewError varchar(100) = 'Number format not found for '+ @TableName
				;THROW 50000, @NewError, 1;
			END
		
		CalculateKey:
		SET @NumberPart += 1
		SET @PrimaryKey = @Prefix + FORMAT(@NumberPart, REPLICATE('0',@NumberLength))

		IF @KeyColumn <> ''
		BEGIN
			SET @DynamicSQL = 'Select @Result = COUNT(*) from ' + @TableName + ' WHERE ' + @KeyColumn + ' = ''' + @PrimaryKey + ''''
			Exec sp_executesql @DynamicSQL, N'@Result int out', @RecordCount out

			IF @RecordCount > 0
			BEGIN
				UPDATE adm.NumberFormat SET NumberPart = @NumberPart WHERE TableName = @TableName
				GOTO CalculateKey
			END
		END
		
		SET @RetValue = @PrimaryKey
		
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
        ROLLBACK TRANSACTION
		RAISERROR ('%s (NumberFormat_Get)', 16, 1, @ERROR_MESSAGE);
	END CATCH

End
GO
/****** Object:  StoredProcedure [adm].[NumberFormat_Set]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   Procedure [adm].[NumberFormat_Set]
(
	@TableName varchar(50)
)	
As
Begin
	SET NOCOUNT ON

	BEGIN TRY
		BEGIN TRANSACTION

		UPDATE adm.NumberFormat SET NumberPart = NumberPart + 1 WHERE TableName = @TableName
		
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
        ROLLBACK TRANSACTION
		RAISERROR ('%s (NumberFormat_Set)', 16, 1, @ERROR_MESSAGE);
	END CATCH

End
GO
/****** Object:  StoredProcedure [adm].[SystemUser_AddEdit]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   Procedure [adm].[SystemUser_AddEdit]
(
	@APIKey	varchar(100),
				   
	@UserID	  		  varchar(50),
	@UserType		  varchar(50),
	@BloodBankCentreID varchar(50),
	@Username		  varchar(50),
	@Password		  varchar(100),
	@DisplayName	  varchar(100),
	@EmailAddress	  varchar(100),
	@ActiveStatus	  varchar(50),

	@LogUserID varchar(50) = '',
	@RetValue varchar(50) = '' OUT
)	
As
Begin
	SET NOCOUNT ON

	BEGIN TRY
		BEGIN TRANSACTION

		-- Check for API Key
		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END

		IF @UserID = ''
		BEGIN
			IF EXISTS(select UserID from adm.SystemUser where Username = @Username)
			BEGIN
				;THROW 50000, 'Username already registered', 1;
			END

			IF EXISTS(select UserID from adm.SystemUser where EmailAddress = @EmailAddress)
			BEGIN
				;THROW 50000, 'Email address already registered', 1;
			END

			-- Get next primary key
			DECLARE @PrimaryKey Varchar(50)
			exec adm.NumberFormat_Get 'adm.SystemUser','UserID', @PrimaryKey OUT 

			INSERT INTO adm.SystemUser (UserID,UserType, Username, Password, DisplayName, EmailAddress, ActiveStatus)
				values (@PrimaryKey,@UserType, @Username, @Password, @DisplayName, @EmailAddress, @ActiveStatus)

			exec adm.NumberFormat_Set 'adm.SystemUser'

			SET @RetValue = @PrimaryKey

		END
		ELSE
		BEGIN
			IF EXISTS(select UserID from adm.SystemUser where Username = @Username AND UserID <> @UserID)
			BEGIN
				;THROW 50000, 'Username already registered', 1;
			END

			IF EXISTS(select UserID from adm.SystemUser where EmailAddress = @EmailAddress AND UserID <> @UserID)
			BEGIN
				;THROW 50000, 'Email address already registered', 1;
			END

			SET @RetValue = @UserID

			update adm.SystemUser SET 
				UserType = @UserType,
				BloodBankCentreID = BloodBankCentreID,
				Username = @Username, 
				DisplayName = @DisplayName, 
				EmailAddress = @EmailAddress, 
				ActiveStatus = @ActiveStatus
			WHERE UserID = @UserID

			IF @Password <> ''
			BEGIN

				update adm.SystemUser SET 
					Password = @Password
				WHERE UserID = @UserID

			END
		END
		
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
        IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
        RAISERROR ('%s. Script: adm.SystemUser_AddEdit', 16, 1, @ERROR_MESSAGE);
	END CATCH

End
GO
/****** Object:  StoredProcedure [adm].[SystemUser_Count]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   Procedure [adm].[SystemUser_Count]
(
	@APIKey	varchar(100),
				   
	@KeyW varchar(50) = '',
	@ActiveStatus varchar(50) = ''
)	
As
Begin
	SET NOCOUNT ON
	BEGIN TRY
		
		-- Check for API Key
		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END


		select 	COUNT(*) as RecordCount
		
		from adm.SystemUser

		where Username + ' ' + DisplayName + ' ' + EmailAddress LIKE '%' + @KeyW + '%'

		AND
		CASE WHEN @ActiveStatus = '' THEN 1
			 WHEN @ActiveStatus <> '' AND ActiveStatus = @ActiveStatus THEN 1
		END = 1

		
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
		RAISERROR ('%s. Script: adm.SystemUser_Count', 16, 1, @ERROR_MESSAGE);
	END CATCH

End
GO
/****** Object:  StoredProcedure [adm].[SystemUser_Delete]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   Procedure [adm].[SystemUser_Delete]
(
	@APIKey	varchar(100),
	@ID varchar(50),

	@LogUserID varchar(50) = '',
	@RetValue varchar(50) = '' OUT
)	
As
Begin
	SET NOCOUNT ON

	BEGIN TRY
		BEGIN TRANSACTION

		-- Check for API Key
		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END

		-- Check for record
		IF NOT EXISTS (select UserID from adm.SystemUser WHERE UserID = @ID)
		BEGIN
			;THROW 50000, 'Record not found', 1;
		END

		IF EXISTS(select UserID from adm.SystemUser where UserID = '0000')
		BEGIN
			;THROW 50000, 'You cannot delete main administrator', 1;
		END
		
		SET @RetValue = @ID
		delete from adm.SystemUser WHERE UserID = @ID

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
        IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
        RAISERROR ('%s. Script: adm.SystemUser_Delete', 16, 1, @ERROR_MESSAGE);
	END CATCH

End
GO
/****** Object:  StoredProcedure [adm].[SystemUser_Get]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   Procedure [adm].[SystemUser_Get]
(
	@APIKey	varchar(100),
	@ID varchar(50)
)	
As
Begin
	SET NOCOUNT ON
	BEGIN TRY
		
		-- Check for API Key
		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END

			select UserID,UserType, adm.SystemUser.BloodBankCentreID, Username, Password, DisplayName, EmailAddress, ActiveStatus
		
		from adm.SystemUser
		inner join bbk.BloodBankCentre on bbk.BloodBankCentre.BloodBankCentreID = adm.SystemUser.BloodBankCentreID


		where UserID = @ID
		
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
		RAISERROR ('%s in "User_Get"', 16, 1, @ERROR_MESSAGE);
	END CATCH

End
GO
/****** Object:  StoredProcedure [adm].[SystemUser_GetByEmail]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   Procedure [adm].[SystemUser_GetByEmail]
(
	@APIKey	varchar(100),
	@EmailAddress varchar(50)
)	
As
Begin
	SET NOCOUNT ON
	BEGIN TRY
		
		-- Check for API Key
		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END

		select UserID,UserType, adm.SystemUser.BloodBankCentreID, Username, Password, DisplayName, EmailAddress, ActiveStatus
		
		from adm.SystemUser
		inner join bbk.BloodBankCentre on bbk.BloodBankCentre.BloodBankCentreID = adm.SystemUser.BloodBankCentreID


		where EmailAddress = @EmailAddress
		
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
		RAISERROR ('%s in "User_Login"', 16, 1, @ERROR_MESSAGE);
	END CATCH

End
GO
/****** Object:  StoredProcedure [adm].[SystemUser_GetByUsername]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create   Procedure [adm].[SystemUser_GetByUsername]
(
	@APIKey	varchar(100),
	@Username varchar(50)
)	
As
Begin
	SET NOCOUNT ON
	BEGIN TRY
		
		-- Check for API Key
		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END

		select UserID,UserType, adm.SystemUser.BloodBankCentreID, Username, Password, DisplayName, EmailAddress, ActiveStatus
		
		from adm.SystemUser
		inner join bbk.BloodBankCentre on bbk.BloodBankCentre.BloodBankCentreID = adm.SystemUser.BloodBankCentreID


		where Username = @Username
		
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
		RAISERROR ('%s in "SystemUser_GetByUsername"', 16, 1, @ERROR_MESSAGE);
	END CATCH

End
GO
/****** Object:  StoredProcedure [adm].[SystemUser_List]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   Procedure [adm].[SystemUser_List]
(
	@APIKey	varchar(100),
				   
	@KeyW varchar(50) = '',
	@ActiveStatus varchar(50) = '',

	@Page int = 0,
	@PageSize int = 99999
)	
As
Begin
	SET NOCOUNT ON
	BEGIN TRY
		
		-- Check for API Key
		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END

		-- Set default value page and page size
		IF @Page = 0 
		BEGIN
			SET @PageSize = 99999
			SET @Page = 1
		END


		select UserID,UserType, adm.SystemUser.BloodBankCentreID, Username, Password, DisplayName, EmailAddress, ActiveStatus
		
		from adm.SystemUser
		inner join bbk.BloodBankCentre on bbk.BloodBankCentre.BloodBankCentreID = adm.SystemUser.BloodBankCentreID


		where Username + ' ' + DisplayName + ' ' + EmailAddress LIKE '%' + @KeyW + '%'

		AND
		CASE WHEN @ActiveStatus = '' THEN 1
			 WHEN @ActiveStatus <> '' AND ActiveStatus = @ActiveStatus THEN 1
		END = 1

		ORDER BY Username

		OFFSET (@PageSize*(@Page-1)) ROWS FETCH NEXT @PageSize ROWS ONLY;
		
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
		RAISERROR ('%s. Script: adm.SystemUser_List', 16, 1, @ERROR_MESSAGE);
	END CATCH

End
GO
/****** Object:  StoredProcedure [adm].[SystemUser_Login]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   Procedure [adm].[SystemUser_Login]
(
	@APIKey	varchar(100),
	@Username varchar(50)
)	
As
Begin
	SET NOCOUNT ON
	BEGIN TRY
		
		-- Check for API Key
		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END

		select UserID,UserType, adm.SystemUser.BloodBankCentreID, Username, Password, DisplayName, EmailAddress, ActiveStatus
		
		from adm.SystemUser
		inner join bbk.BloodBankCentre on bbk.BloodBankCentre.BloodBankCentreID = adm.SystemUser.BloodBankCentreID


		where Username = @Username
		
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
		RAISERROR ('%s in "User_Login"', 16, 1, @ERROR_MESSAGE);
	END CATCH

End
GO
/****** Object:  StoredProcedure [adm].[Token_AddEdit]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/****** Object:  StoredProcedure [adm].[Token_AddEdit]    Script Date: 8/24/2021 2:23:54 PM ******/
CREATE   Procedure [adm].[Token_AddEdit]
(
	@APIKey	varchar(100),
				   
	@TokenID	   varchar(50),
	@TokenType	   varchar(50),
	@RefID		   varchar(50),
	@TokenData	   varchar(50),
	@CreatedDate   varchar(50),
	@ExpiryDate	   varchar(50),
	@TokenStatus   varchar(50),

	@RetValue varchar(50) = '' OUT
)	
As
Begin
	SET NOCOUNT ON

	BEGIN TRY
		BEGIN TRANSACTION

		-- Check for API Key
		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END

		IF @TokenID = ''
		BEGIN
			SET @retvalue = NEWID();

			WHILE EXISTS(select TokenID from adm.Token WHERE TokenID = @retvalue)
			BEGIN
				SET @retvalue = NEWID();
			END

			INSERT INTO adm.Token (TokenID, TokenType, RefID, TokenData, CreatedDate, ExpiryDate, TokenStatus)
				values (@retvalue, @TokenType, @RefID, @TokenData, @CreatedDate, @ExpiryDate, @TokenStatus)

			IF @TokenType IN ('CPwReset','APwReset')
			BEGIN
				UPDATE adm.Token SET 
				TokenStatus = 'SS'
					WHERE TokenID <> @retvalue AND TokenType = @TokenType AND RefID = @RefID AND TokenStatus = 'A'
			END
		END
		ELSE
		BEGIN
			set @retvalue = @TokenID;

			UPDATE adm.Token SET 
				ExpiryDate = @ExpiryDate,
				TokenStatus = @TokenStatus
			WHERE TokenID = @TokenID
		END
		
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
        IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
        RAISERROR ('%s. Script: adm.Token_AddEdit', 16, 1, @ERROR_MESSAGE);
	END CATCH

End
GO
/****** Object:  StoredProcedure [adm].[Token_Get]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   Procedure [adm].[Token_Get]
(
	@APIKey	varchar(100),
	@ID varchar(50)
)	
As
Begin
	SET NOCOUNT ON
	BEGIN TRY
		
		-- Check for API Key
		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END

		select TokenID, TokenType, RefID, TokenData, CreatedDate, ExpiryDate, TokenStatus
		
		from adm.Token

		where TokenID = @ID
		
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
		RAISERROR ('%s. Script: adm.Token_Get', 16, 1, @ERROR_MESSAGE);
	END CATCH

End
GO
/****** Object:  StoredProcedure [bbk].[BloodBankCentre_AddEdit]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   Procedure[bbk].[BloodBankCentre_AddEdit]
(
	@APIKey	varchar(100),
				   
	@BloodBankCentreID	varchar(50),
	@BloodBankCentreName  varchar(50),
    @LocationID   varchar(50),
	@ContactNo   varchar(50),
	@LogUserID varchar(50) = '',
	@RetValue varchar(50) = '' OUT
)	
As
Begin
	SET NOCOUNT ON

	BEGIN TRY
		BEGIN TRANSACTION

		-- Check for API Key
		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END

		IF @BloodBankCentreID = ''
		BEGIN
			IF EXISTS(select BloodBankCentreID from bbk.BloodBankCentre where BloodBankCentreName = @BloodBankCentreName)
			BEGIN
				;THROW 50000, 'Blood Bank Centre name already exists', 1;
			END

			-- Get next primary key
			DECLARE @PrimaryKey Varchar(50)
			exec adm.NumberFormat_Get 'bbk.BloodBankCentre','BloodBankCentreID', @PrimaryKey OUT 

			INSERT INTO bbk.BloodBankCentre (BloodBankCentreID, BloodBankCentreName,LocationID,ContactNo)
				values (@PrimaryKey, @BloodBankCentreName,@LocationID,@ContactNo)

			exec adm.NumberFormat_Set 'bbk.BloodBankCentre'

			SET @RetValue = @PrimaryKey

		END
		ELSE
		BEGIN
			IF EXISTS(select BloodBankCentreID from bbk.BloodBankCentre where BloodBankCentreName = @BloodBankCentreName AND BloodBankCentreID <> @BloodBankCentreID)
			BEGIN
				;THROW 50000, 'Blood Bank Centre name already exists', 1;
			END

			SET @RetValue = @BloodBankCentreID

			update bbk.BloodBankCentre SET 
				BloodBankCentreName = @BloodBankCentreName,
                LocationID = @LocationID,
				ContactNo = @ContactNo
			WHERE BloodBankCentreID = @BloodBankCentreID

		END
		
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
        IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
        RAISERROR ('%s in "BloodBankCentre_AddEdit"', 16, 1, @ERROR_MESSAGE);
	END CATCH

End
GO
/****** Object:  StoredProcedure [bbk].[BloodBankCentre_Count]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   Procedure[bbk].[BloodBankCentre_Count]
(
	@APIKey	varchar(100),
				   
	@KeyW varchar(50) = '',
    @LocationID varchar(50) = ''
)	
As
Begin
	SET NOCOUNT ON
	BEGIN TRY
		
		-- Check for API Key
		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END


		select 	COUNT(*) as RecordCount
		
		from bbk.BloodBankCentre
		inner join bbk.Location on bbk.BloodBankCentre.LocationID = bbk.Location.LocationID

		where BloodBankCentreName  LIKE '%' + @KeyW + '%'

        AND 
		CASE WHEN @LocationID = '' THEN 1
			 WHEN @LocationID <> '' AND bbk.BloodBankCentre.LocationID = @LocationID THEN 1
		END = 1

		
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
		RAISERROR ('%s in "BloodBankCentre_Count"', 16, 1, @ERROR_MESSAGE);
	END CATCH

End
GO
/****** Object:  StoredProcedure [bbk].[BloodBankCentre_Delete]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   Procedure[bbk].[BloodBankCentre_Delete]
(
	@APIKey	varchar(100),
	@ID varchar(50),

	@LogUserID varchar(50) = '',
	@RetValue varchar(50) = '' OUT
)	
As
Begin
	SET NOCOUNT ON

	BEGIN TRY
		BEGIN TRANSACTION

		-- Check for API Key
		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END

		-- Check for record
		IF NOT EXISTS (select BloodBankCentreID from bbk.BloodBankCentre WHERE BloodBankCentreID = @ID)
		BEGIN
			;THROW 50000, 'Record not found', 1;
		END

		 
		
		SET @RetValue = @ID
		delete from bbk.BloodBankCentre WHERE BloodBankCentreID = @ID

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
        IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
        RAISERROR ('%s in "BloodBankCentre_Delete"', 16, 1, @ERROR_MESSAGE);
	END CATCH

End
GO
/****** Object:  StoredProcedure [bbk].[BloodBankCentre_Get]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   Procedure[bbk].[BloodBankCentre_Get]
(
	@APIKey	varchar(100),
	@ID varchar(50)
)	
As
Begin
	SET NOCOUNT ON
	BEGIN TRY
		
		-- Check for API Key
		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END

		select BloodBankCentreID, BloodBankCentreName, bbk.BloodBankCentre.LocationID, LocationName
		from bbk.BloodBankCentre
		inner join bbk.Location on bbk.BloodBankCentre.LocationID = bbk.Location.LocationID
		
		where BloodBankCentreID = @ID
		
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
		RAISERROR ('%s in "BloodBankCentre_Get"', 16, 1, @ERROR_MESSAGE);
	END CATCH

End
GO
/****** Object:  StoredProcedure [bbk].[BloodBankCentre_List]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   Procedure[bbk].[BloodBankCentre_List]
(
	@APIKey	varchar(100),
				   
	@KeyW varchar(50) = '',
	@LocationID	varchar(50) = '',
	

	@Page int = 0,
	@PageSize int = 99999
)	
As
Begin
	SET NOCOUNT ON
	BEGIN TRY
		
		-- Check for API Key
		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END

		-- Set default value page and page size
		IF @Page = 0 
		BEGIN
			SET @PageSize = 99999
			SET @Page = 1
		END


		select BloodBankCentreID, BloodBankCentreName, bbk.BloodBankCentre.LocationID, LocationName,ContactNo, BloodBankCentreName +' ('+LocationName+')' as BloodBankCentreDet 
		from bbk.BloodBankCentre
		inner join bbk.Location on bbk.BloodBankCentre.LocationID = bbk.Location.LocationID
		
		where BloodBankCentreName  LIKE '%' + @KeyW + '%'

		AND 
		CASE WHEN @LocationID = '' THEN 1
			 WHEN @LocationID <> '' AND bbk.BloodBankCentre.LocationID = @LocationID THEN 1
		END = 1

		ORDER BY BloodBankCentreName, LocationName asc

		OFFSET (@PageSize*(@Page-1)) ROWS FETCH NEXT @PageSize ROWS ONLY;
		
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
		RAISERROR ('%s in "BloodBankCentre_List"', 16, 1, @ERROR_MESSAGE);
	END CATCH

End
GO
/****** Object:  StoredProcedure [bbk].[BloodDonationCampaign_AddEdit]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   Procedure [bbk].[BloodDonationCampaign_AddEdit]
(
    @APIKey varchar(100),
    @CampaignID varchar(50),
    @OrganizerName varchar(255),
    @OrganizerAddress varchar(255),
    @Email varchar(255),
    @PhoneNumber varchar(20),
    @BloodBankCentreID varchar(50),
    @RegistrationDate datetime2(7),
    @VerifiedBy varchar(50),
    @StartDate datetime2(7),
    @EndDate datetime2(7),
    @TargetAddress varchar(255),
    @TargetLocation varchar(50),
    @NumberOfDonors int,
    @ActiveStatus varchar(50),
	@LogUserID varchar(50) = '',
    @RetValue varchar(50) OUT
)
AS
BEGIN
    SET NOCOUNT ON

    BEGIN TRY
        BEGIN TRANSACTION

        -- Check for API Key
        IF NOT EXISTS (SELECT KeyID FROM adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
        BEGIN
            ;THROW 50000, 'Invalid API Key', 1;
        END

        IF @CampaignID = ''
        BEGIN
            -- Get next primary key
            DECLARE @PrimaryKey varchar(50)
            EXEC adm.NumberFormat_Get 'bbk.BloodDonationCampaign','CampaignID', @PrimaryKey OUT 

            INSERT INTO bbk.BloodDonationCampaign (
                CampaignID, OrganizerName, OrganizerAddress, Email, PhoneNumber, BloodBankCentreID,
                RegistrationDate, VerifiedBy, StartDate, EndDate,
                TargetAddress, TargetLocation, NumberOfDonors, ActiveStatus
            )
            VALUES (
                @PrimaryKey, @OrganizerName, @OrganizerAddress, @Email, @PhoneNumber, @BloodBankCentreID,
                @RegistrationDate, @VerifiedBy, @StartDate, @EndDate,
                @TargetAddress, @TargetLocation, @NumberOfDonors, @ActiveStatus
            )

            EXEC adm.NumberFormat_Set 'bbk.BloodDonationCampaign'

            SET @RetValue = @PrimaryKey

        END
        ELSE
        BEGIN
            UPDATE bbk.BloodDonationCampaign SET 
                OrganizerName = @OrganizerName,
                OrganizerAddress = @OrganizerAddress,
                Email = @Email,
                PhoneNumber = @PhoneNumber,
                BloodBankCentreID = @BloodBankCentreID,
                RegistrationDate = @RegistrationDate,
               
                VerifiedBy = @VerifiedBy,
                StartDate = @StartDate,
                EndDate = @EndDate,
                TargetAddress = @TargetAddress,
                TargetLocation = @TargetLocation,
                NumberOfDonors = @NumberOfDonors,
                ActiveStatus = @ActiveStatus
            WHERE CampaignID = @CampaignID

            SET @RetValue = @CampaignID
        END

        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000) = ERROR_MESSAGE()
        IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
        RAISERROR ('%s in "BloodDonationCampaign_AddEdit"', 16, 1, @ERROR_MESSAGE)
    END CATCH
END
GO
/****** Object:  StoredProcedure [bbk].[BloodDonationCampaign_Count]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   Procedure [bbk].[BloodDonationCampaign_Count]
(
	@APIKey varchar(100),
	@KeyW varchar(50) = '',
	@RegistrationDate datetime2(7) = '',
	@StartDate datetime2(7) = '',
	@BloodBankCentreID varchar(50) = '',
	@LocationID varchar(50) = '',
	@ActiveStatus varchar(50) = ''
)
AS
BEGIN
	SET NOCOUNT ON
	BEGIN TRY
		
		-- Check for API Key
		IF NOT EXISTS (SELECT KeyID FROM adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END

		SELECT COUNT(*) AS RecordCount
		FROM bbk.BloodDonationCampaign
		inner join bbk.BloodBankCentre on bbk.BloodDonationCampaign.BloodBankCentreID = bbk.BloodBankCentre.BloodBankCentreID
		inner join bbk.Location on bbk.BloodBankCentre.LocationID = bbk.Location.LocationID

		WHERE OrganizerName LIKE '%' + @KeyW + '%'
			AND 
		CASE WHEN @RegistrationDate = '' THEN 1
			 WHEN @RegistrationDate <> '' AND bbk.BloodDonationCampaign.RegistrationDate = @RegistrationDate THEN 1
		END = 1

		AND 
		CASE WHEN @StartDate = '' THEN 1
			 WHEN @StartDate <> '' AND bbk.BloodDonationCampaign.StartDate = @StartDate THEN 1
		END = 1

		AND 
		CASE WHEN @BloodBankCentreID = '' THEN 1
			 WHEN @BloodBankCentreID <> '' AND bbk.BloodDonationCampaign.BloodBankCentreID = @BloodBankCentreID THEN 1
		END = 1

		AND 
		CASE WHEN @LocationID = '' THEN 1
			 WHEN @LocationID <> '' AND bbk.BloodDonationCampaign.TargetLocation = @LocationID THEN 1
		END = 1

		AND 
		CASE WHEN @ActiveStatus = '' THEN 1
			 WHEN @ActiveStatus <> '' AND bbk.BloodDonationCampaign.ActiveStatus = @ActiveStatus THEN 1
		END = 1

	END TRY
	BEGIN CATCH
		DECLARE @ERROR_MESSAGE varchar(4000) = ERROR_MESSAGE();
		RAISERROR('%s in "BloodDonationCampaign_Count"', 16, 1, @ERROR_MESSAGE);
	END CATCH
END
GO
/****** Object:  StoredProcedure [bbk].[BloodDonationCampaign_Delete]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 CREATE   Procedure [bbk].[BloodDonationCampaign_Delete]
(
	@APIKey varchar(100),
	@ID varchar(50),
	@LogUserID varchar(50) = '',
	@RetValue varchar(50) = '' OUT
)
AS
BEGIN
	SET NOCOUNT ON

	BEGIN TRY
		BEGIN TRANSACTION

		-- Check for API Key
		IF NOT EXISTS (SELECT KeyID FROM adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END

		-- Check for record
		IF NOT EXISTS (SELECT CampaignID FROM bbk.BloodDonationCampaign WHERE CampaignID = @ID)
		BEGIN
			;THROW 50000, 'Record not found', 1;
		END

		SET @RetValue = @ID
		DELETE FROM bbk.BloodDonationCampaign WHERE CampaignID = @ID

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		DECLARE @ERROR_MESSAGE varchar(4000) = ERROR_MESSAGE();
		IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
		RAISERROR ('%s in "BloodDonationCampaign_Delete"', 16, 1, @ERROR_MESSAGE);
	END CATCH
END

GO
/****** Object:  StoredProcedure [bbk].[BloodDonationCampaign_Get]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   Procedure [bbk].[BloodDonationCampaign_Get]
(
	@APIKey varchar(100),
	@ID varchar(50)
)
AS
BEGIN
	SET NOCOUNT ON
	BEGIN TRY
		
		-- Check for API Key
		IF NOT EXISTS (SELECT KeyID FROM adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END

		SELECT CampaignID, OrganizerName, OrganizerAddress, Email, PhoneNumber, BloodBankCentreID, RegistrationDate, VerifiedBy, StartDate, EndDate, TargetAddress, TargetLocation, NumberOfDonors, ActiveStatus 
		FROM bbk.BloodDonationCampaign
		WHERE CampaignID = @ID
		
	END TRY
	BEGIN CATCH
		DECLARE @ERROR_MESSAGE varchar(4000) = ERROR_MESSAGE();
		RAISERROR ('%s in "BloodDonationCampaign_Get"', 16, 1, @ERROR_MESSAGE);
	END CATCH
END
GO
/****** Object:  StoredProcedure [bbk].[BloodDonationCampaign_List]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   Procedure [bbk].[BloodDonationCampaign_List]
(
   @APIKey varchar(100),
	@KeyW varchar(50) = '',
	@RegistrationDate datetime2(7) = '',
	@StartDate datetime2(7) = '',
	@BloodBankCentreID varchar(50) = '',
	@LocationID varchar(50) = '',
	@ActiveStatus varchar(50) = '',
    @Page int = 0,
    @PageSize int = 99999
)
AS
BEGIN
    SET NOCOUNT ON
    BEGIN TRY
        -- Check for API Key
        IF NOT EXISTS (SELECT KeyID FROM adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
        BEGIN
            ;THROW 50000, 'Invalid API Key', 1;
        END

        -- Set default value for page and page size
        IF @Page = 0
        BEGIN
            SET @PageSize = 99999
            SET @Page = 1
        END

        SELECT CampaignID, OrganizerName, OrganizerAddress, Email, PhoneNumber,  bbk.BloodDonationCampaign.BloodBankCentreID, RegistrationDate,
            VerifiedBy, StartDate, EndDate, TargetAddress, (select LocationName from bbk.Location where LocationID = TargetLocation) as 'Location',TargetLocation, NumberOfDonors, ActiveStatus,
        bbk.BloodBankCentre.BloodBankCentreName as 'BloodBankCentre'

		FROM bbk.BloodDonationCampaign
        inner join bbk.BloodBankCentre on bbk.BloodDonationCampaign.BloodBankCentreID = bbk.BloodBankCentre.BloodBankCentreID
		inner join bbk.Location on bbk.BloodBankCentre.LocationID = bbk.Location.LocationID

		WHERE OrganizerName LIKE '%' + @KeyW + '%'
		 
		
		AND 
		CASE WHEN @RegistrationDate = '' THEN 1
			 WHEN @RegistrationDate <> '' AND bbk.BloodDonationCampaign.RegistrationDate = @RegistrationDate THEN 1
		END = 1

		AND 
		CASE WHEN @StartDate = '' THEN 1
			 WHEN @StartDate <> '' AND bbk.BloodDonationCampaign.StartDate = @StartDate THEN 1
		END = 1

		AND 
		CASE WHEN @BloodBankCentreID = '' THEN 1
			 WHEN @BloodBankCentreID <> '' AND bbk.BloodDonationCampaign.BloodBankCentreID = @BloodBankCentreID THEN 1
		END = 1

		AND 
		CASE WHEN @LocationID = '' THEN 1
			 WHEN @LocationID <> '' AND bbk.BloodDonationCampaign.TargetLocation = @LocationID THEN 1
		END = 1

		AND 
		CASE WHEN @ActiveStatus = '' THEN 1
			 WHEN @ActiveStatus <> '' AND bbk.BloodDonationCampaign.ActiveStatus = @ActiveStatus THEN 1
		END = 1

        ORDER BY OrganizerName ASC, RegistrationDate ASC
        OFFSET (@PageSize*(@Page-1)) ROWS FETCH NEXT @PageSize ROWS ONLY;

    END TRY
    BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
        RAISERROR ('%s in "BloodDonationCampaign_List"', 16, 1, @ERROR_MESSAGE);
    END CATCH
END
GO
/****** Object:  StoredProcedure [bbk].[BloodRequest_AddEdit]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure[bbk].[BloodRequest_AddEdit]
(
	@APIKey	varchar(100),
	@BloodRequestID varchar(50) = '',
	@HospitalID varchar(50),
	@PatientName VARCHAR(255),
	@PatientAge INT,
	@PatientSex varchar(5),
	@BloodGroup VARCHAR(10),
	@DoctorInCharge VARCHAR(255),
	@DoctorContact VARCHAR(20),
	@DateOfRequest datetime2(7),
	@DateTimeOfRequirement datetime2(7),
	@ReasonOfTransfusion VARCHAR(255),
	@BloodBankCentreID varchar(50),
	@Status VARCHAR(50),
	@LogUserID varchar(50) = '',
	@RetValue varchar(50) = '' OUT
)	
As
Begin
	SET NOCOUNT ON

	BEGIN TRY
		BEGIN TRANSACTION

		-- Check for API Key
		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END

		IF @BloodRequestID = ''
		BEGIN
			-- Get next primary key
			DECLARE @PrimaryKey Varchar(50)
			exec adm.NumberFormat_Get 'bbk.BloodRequest','BloodRequestID', @PrimaryKey OUT 

			INSERT INTO bbk.BloodRequest (BloodRequestID, HospitalID, PatientName, PatientAge, PatientSex, BloodGroup, DoctorInCharge, DoctorContact, DateOfRequest, DateTimeOfRequirement, ReasonOfTransfusion, BloodBankCentreID, Status)
				values (@PrimaryKey, @HospitalID, @PatientName, @PatientAge, @PatientSex, @BloodGroup, @DoctorInCharge, @DoctorContact, @DateOfRequest, @DateTimeOfRequirement, @ReasonOfTransfusion, @BloodBankCentreID, @Status)

			exec adm.NumberFormat_Set 'bbk.BloodRequest'

			SET @RetValue = @PrimaryKey

		END
		ELSE
		BEGIN
			UPDATE bbk.BloodRequest SET 
				HospitalID = @HospitalID,
				PatientName = @PatientName,
				PatientAge = @PatientAge,
				PatientSex = @PatientSex,
				BloodGroup = @BloodGroup,
				DoctorInCharge = @DoctorInCharge,
				DoctorContact = @DoctorContact,
				DateOfRequest = @DateOfRequest,
				DateTimeOfRequirement = @DateTimeOfRequirement,
				ReasonOfTransfusion = @ReasonOfTransfusion,
				BloodBankCentreID = @BloodBankCentreID,
				Status = @Status
			WHERE BloodRequestID = @BloodRequestID

			SET @RetValue = @BloodRequestID

		END
		
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
        IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
        RAISERROR ('%s in "BloodRequest_AddEdit"', 16, 1, @ERROR_MESSAGE);
	END CATCH

End
GO
/****** Object:  StoredProcedure [bbk].[BloodRequest_Count]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure[bbk].[BloodRequest_Count]
(
	@APIKey	varchar(100),
				   
	@KeyW varchar(50) = '',
	@HospitalID varchar(50) ='',
    @LocationID varchar(50) = '',
	@DateTimeOfRequirement datetime2(7)='',
	@Status varchar(50) =''

)	
As
Begin
	SET NOCOUNT ON
	BEGIN TRY
		
		-- Check for API Key
		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END


		select 	COUNT(*) as RecordCount
		
		from bbk.BloodRequest
		inner join bbk.OutHospital on bbk.BloodRequest.HospitalID = bbk.OutHospital.HospitalID
		inner join bbk.Location on bbk.OutHospital.LocationID = bbk.Location.LocationID

		where PatientName +''+ DoctorInCharge  LIKE '%' + @KeyW + '%'

		AND 
		CASE WHEN @HospitalID = '' THEN 1
			 WHEN @HospitalID <> '' AND bbk.BloodRequest.HospitalID = @HospitalID THEN 1
		END = 1

        AND 
		CASE WHEN @LocationID = '' THEN 1
			 WHEN @LocationID <> '' AND bbk.OutHospital.LocationID = @LocationID THEN 1
		END = 1
		AND 
    CASE WHEN @DateTimeOfRequirement = '' THEN 1
         WHEN @DateTimeOfRequirement <> '' AND CAST(bbk.BloodRequest.DateTimeOfRequirement AS date) = CAST(@DateTimeOfRequirement AS date) THEN 1
    END = 1

		  AND 
		CASE WHEN @Status = '' THEN 1
			 WHEN @Status <> '' AND bbk.BloodRequest.Status = @Status THEN 1
		END = 1



		
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
		RAISERROR ('%s in "BloodRequest_Count"', 16, 1, @ERROR_MESSAGE);
	END CATCH

End
GO
/****** Object:  StoredProcedure [bbk].[BloodRequest_Delete]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create   Procedure[bbk].[BloodRequest_Delete]
(
	@APIKey	varchar(100),
	@ID varchar(50),

	@LogUserID varchar(50) = '',
	@RetValue varchar(50) = '' OUT
)	
As
Begin
	SET NOCOUNT ON

	BEGIN TRY
		BEGIN TRANSACTION

		-- Check for API Key
		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END


		-- Check for record
		IF NOT EXISTS (SELECT BloodRequestID FROM bbk.BloodRequest WHERE BloodRequestID = @ID)
		BEGIN
			;THROW 50000, 'Record not found', 1;
		END

		SET @RetValue = @ID
		DELETE FROM bbk.BloodRequest WHERE BloodRequestID = @ID


		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
        IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
        RAISERROR ('%s in "BloodRequest_Delete"', 16, 1, @ERROR_MESSAGE);
	END CATCH

End
GO
/****** Object:  StoredProcedure [bbk].[BloodRequest_Get]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [bbk].[BloodRequest_Get]
(
	@APIKey	varchar(100),
	@ID varchar(50)
)	
As
Begin
	SET NOCOUNT ON
	BEGIN TRY
		
		-- Check for API Key
		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END

		SELECT BloodRequestID, BloodRequest.HospitalID, PatientName, PatientAge, PatientSex, BloodGroup, DoctorInCharge,
			DoctorContact, DateOfRequest, DateTimeOfRequirement, ReasonOfTransfusion, BloodBankCentreID, Status,HospitalName,
			LocationName, bbk.OutHospital.PhoneNumber as 'HPhoneNumber',bbk.OutHospital.Address as 'HAddress'
		
		from bbk.BloodRequest
		inner join bbk.OutHospital on bbk.BloodRequest.HospitalID = bbk.OutHospital.HospitalID
		inner join bbk.Location on bbk.OutHospital.LocationID = bbk.Location.LocationID
			WHERE BloodRequestID = @ID
		
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
		RAISERROR ('%s in "BloodRequest_Get"', 16, 1, @ERROR_MESSAGE);
	END CATCH

End
GO
/****** Object:  StoredProcedure [bbk].[BloodRequest_List]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   Procedure [bbk].[BloodRequest_List]
(
	@APIKey	varchar(100),
				   
	@KeyW varchar(50) = '',
	@HospitalID varchar(50) ='',
    @LocationID varchar(50) = '',
	@DateTimeOfRequirement datetime2(7)='',
	@Status varchar(50) ='',
	

	@Page int = 0,
	@PageSize int = 99999
)	
As
Begin
	SET NOCOUNT ON
	BEGIN TRY
		
		-- Check for API Key
		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END

		-- Set default value page and page size
		IF @Page = 0 
		BEGIN
			SET @PageSize = 99999
			SET @Page = 1
		END


			SELECT BloodRequestID, BloodRequest.HospitalID, PatientName, PatientAge, PatientSex, BloodGroup, DoctorInCharge,
			DoctorContact, DateOfRequest, DateTimeOfRequirement, ReasonOfTransfusion,  bbk.BloodRequest.BloodBankCentreID, Status,HospitalName,
			LocationName, bbk.OutHospital.PhoneNumber as 'HPhoneNumber',bbk.OutHospital.Address as 'HAddress',BloodBankCentreName,bbk.OutHospital.PhoneNumber as 'OutHospitalPhoneNumber'
		
		from bbk.BloodRequest
		inner join bbk.OutHospital on bbk.BloodRequest.HospitalID = bbk.OutHospital.HospitalID
		inner join bbk.Location on bbk.OutHospital.LocationID = bbk.Location.LocationID
		left join bbk.BloodBankCentre on bbk.BloodRequest.BloodBankCentreID =bbk.BloodBankCentre.BloodBankCentreID

		where PatientName +''+ DoctorInCharge  LIKE '%' + @KeyW + '%'

		AND 
		CASE WHEN @HospitalID = '' THEN 1
			 WHEN @HospitalID <> '' AND bbk.BloodRequest.HospitalID = @HospitalID THEN 1
		END = 1

        AND 
		CASE WHEN @LocationID = '' THEN 1
			 WHEN @LocationID <> '' AND bbk.OutHospital.LocationID = @LocationID THEN 1
		END = 1
		AND 
    CASE WHEN @DateTimeOfRequirement = '' THEN 1
         WHEN @DateTimeOfRequirement <> '' AND CAST(bbk.BloodRequest.DateTimeOfRequirement AS date) = CAST(@DateTimeOfRequirement AS date) THEN 1
    END = 1

		  AND 
		CASE WHEN @Status = '' THEN 1
			 WHEN @Status <> '' AND bbk.BloodRequest.Status = @Status THEN 1
		END = 1



		ORDER BY PatientName, LocationName asc

		OFFSET (@PageSize*(@Page-1)) ROWS FETCH NEXT @PageSize ROWS ONLY;
		
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
		RAISERROR ('%s in "BloodRequest_List"', 16, 1, @ERROR_MESSAGE);
	END CATCH

End
GO
/****** Object:  StoredProcedure [bbk].[BloodRequestDetails_AddEdit]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [bbk].[BloodRequestDetails_AddEdit]
(
	@APIKey varchar(100),
	@BloodRequestDetailsID varchar(50),
	@BloodRequestID varchar(50),
	@WholeBloodUnit int,
	@PackedCellUnit int,
	@FreshFrozenPlasmaUnit int,
	@PlateletComponentsUnit int,
	@SingleDonorPlateletUnit int,
	@CryoPoorPlasmaUnit int,
	@LogUserID varchar(50) = '',
	@RetValue varchar(50) = '' OUT
)
AS
BEGIN
	SET NOCOUNT ON

	BEGIN TRY
		BEGIN TRANSACTION

		-- Check for API Key
		IF NOT EXISTS (SELECT KeyID FROM adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END

		IF @BloodRequestDetailsID = ''
		BEGIN
			-- Get next primary key
			DECLARE @PrimaryKey varchar(50)
			EXEC adm.NumberFormat_Get 'bbk.BloodRequestDetails', 'BloodRequestDetailsID', @PrimaryKey OUT 

			INSERT INTO bbk.BloodRequestDetails (BloodRequestDetailsID, BloodRequestID, WholeBloodUnit, PackedCellUnit, FreshFrozenPlasmaUnit, PlateletComponentsUnit, SingleDonorPlateletUnit, CryoPoorPlasmaUnit)
				VALUES (@PrimaryKey,@BloodRequestID, @WholeBloodUnit, @PackedCellUnit, @FreshFrozenPlasmaUnit, @PlateletComponentsUnit, @SingleDonorPlateletUnit, @CryoPoorPlasmaUnit)

			EXEC adm.NumberFormat_Set 'bbk.BloodRequestDetails'

			SET @RetValue = @PrimaryKey
		END
		ELSE
		BEGIN
			UPDATE bbk.BloodRequestDetails SET 
				WholeBloodUnit = @WholeBloodUnit,
				PackedCellUnit = @PackedCellUnit,
				FreshFrozenPlasmaUnit = @FreshFrozenPlasmaUnit,
				PlateletComponentsUnit = @PlateletComponentsUnit,
				SingleDonorPlateletUnit = @SingleDonorPlateletUnit,
				CryoPoorPlasmaUnit = @CryoPoorPlasmaUnit
			WHERE BloodRequestDetailsID = @BloodRequestID

			SET @RetValue = @BloodRequestID
		END

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
        IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
        RAISERROR ('%s in "BloodRequestDetails_AddEdit"', 16, 1, @ERROR_MESSAGE);
	END CATCH

END
GO
/****** Object:  StoredProcedure [bbk].[BloodRequestDetails_Count]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [bbk].[BloodRequestDetails_Count]
(
	@APIKey varchar(100),
	@KeyW varchar(50) = '',
	@LocationID varchar(50) = '',
	@Status varchar(50) =''
)
AS
BEGIN
	SET NOCOUNT ON
	BEGIN TRY
		
		-- Check for API Key
		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END


		SELECT COUNT(*) as RecordCount
		FROM bbk.BloodRequestDetails
		INNER JOIN bbk.BloodRequest ON bbk.BloodRequestDetails.BloodRequestID = bbk.BloodRequest.BloodRequestID
		INNER JOIN bbk.OutHospital ON bbk.BloodRequest.HospitalID = bbk.OutHospital.HospitalID
		INNER JOIN bbk.Location ON bbk.OutHospital.LocationID = bbk.Location.LocationID
		WHERE 
			 PatientName +''+ DoctorInCharge  LIKE '%' + @KeyW + '%'

        AND 
		CASE WHEN @LocationID = '' THEN 1
			 WHEN @LocationID <> '' AND bbk.OutHospital.LocationID = @LocationID THEN 1
		END = 1

		  AND 
		CASE WHEN @Status = '' THEN 1
			 WHEN @Status <> '' AND bbk.BloodRequest.Status = @Status THEN 1
		END = 1
		
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
		RAISERROR ('%s in "BloodRequestDetails_Count"', 16, 1, @ERROR_MESSAGE);
	END CATCH
END
GO
/****** Object:  StoredProcedure [bbk].[BloodRequestDetails_Delete]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create   Procedure[bbk].[BloodRequestDetails_Delete]
(
	@APIKey	varchar(100),
	@ID varchar(50),

	@LogUserID varchar(50) = '',
	@RetValue varchar(50) = '' OUT
)	
As
Begin
	SET NOCOUNT ON

	BEGIN TRY
		BEGIN TRANSACTION

		-- Check for API Key
		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END


		-- Check for record
		 IF NOT EXISTS (SELECT BloodRequestDetailsID FROM bbk.BloodRequestDetails WHERE BloodRequestDetailsID = @ID)
        BEGIN
            ;THROW 50000, 'Record not found', 1;
        END

        SET @RetValue = @ID
        DELETE FROM bbk.BloodRequestDetails WHERE BloodRequestDetailsID = @ID



		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
        IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
        RAISERROR ('%s in "BloodRequestDetails_Delete"', 16, 1, @ERROR_MESSAGE);
	END CATCH

End
GO
/****** Object:  StoredProcedure [bbk].[BloodRequestDetails_Get]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [bbk].[BloodRequestDetails_Get]
(
	@APIKey varchar(100),
	@ID varchar(50)
)
AS
BEGIN
	SET NOCOUNT ON

	BEGIN TRY
		-- Check for API Key
		IF NOT EXISTS (SELECT KeyID FROM adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1
		END

		SELECT BloodRequestDetailsID, bbk.BloodRequestDetails.BloodRequestID, WholeBloodUnit, PackedCellUnit, FreshFrozenPlasmaUnit, PlateletComponentsUnit, SingleDonorPlateletUnit, CryoPoorPlasmaUnit
		FROM bbk.BloodRequestDetails
		INNER JOIN bbk.BloodRequest ON bbk.BloodRequestDetails.BloodRequestID = bbk.BloodRequest.BloodRequestID
		INNER JOIN bbk.OutHospital ON bbk.BloodRequest.HospitalID = bbk.OutHospital.HospitalID
		INNER JOIN bbk.Location ON bbk.OutHospital.LocationID = bbk.Location.LocationID

		WHERE bbk.BloodRequestDetails.BloodRequestID = @ID
	END TRY

	BEGIN CATCH
		DECLARE @ERROR_MESSAGE varchar(4000) = ERROR_MESSAGE()
		RAISERROR ('%s in "BloodRequestDetails_Get"', 16, 1, @ERROR_MESSAGE)
	END CATCH
END
GO
/****** Object:  StoredProcedure [bbk].[BloodRequestDetails_List]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create   Procedure[bbk].[BloodRequestDetails_List]
(
	@APIKey varchar(100),
	@KeyW varchar(50) = '',
	@LocationID varchar(50) = '',
	@Status varchar(50) ='',
	

	@Page int = 0,
	@PageSize int = 99999
)	
As
Begin
	SET NOCOUNT ON
	BEGIN TRY
		
		-- Check for API Key
		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END

		-- Set default value page and page size
		IF @Page = 0 
		BEGIN
			SET @PageSize = 99999
			SET @Page = 1
		END


			SELECT BloodRequestDetailsID, bbk.BloodRequestDetails.BloodRequestID, WholeBloodUnit, PackedCellUnit, FreshFrozenPlasmaUnit, PlateletComponentsUnit, SingleDonorPlateletUnit, CryoPoorPlasmaUnit
		FROM bbk.BloodRequestDetails
		INNER JOIN bbk.BloodRequest ON bbk.BloodRequestDetails.BloodRequestID = bbk.BloodRequest.BloodRequestID
		INNER JOIN bbk.OutHospital ON bbk.BloodRequest.HospitalID = bbk.OutHospital.HospitalID
		INNER JOIN bbk.Location ON bbk.OutHospital.LocationID = bbk.Location.LocationID
		WHERE 
			 PatientName +''+ DoctorInCharge  LIKE '%' + @KeyW + '%'

        AND 
		CASE WHEN @LocationID = '' THEN 1
			 WHEN @LocationID <> '' AND bbk.OutHospital.LocationID = @LocationID THEN 1
		END = 1

		  AND 
		CASE WHEN @Status = '' THEN 1
			 WHEN @Status <> '' AND bbk.BloodRequest.Status = @Status THEN 1
		END = 1


		ORDER BY PatientName, LocationName asc

		OFFSET (@PageSize*(@Page-1)) ROWS FETCH NEXT @PageSize ROWS ONLY;
		
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
		RAISERROR ('%s in "BloodRequestDetails_List"', 16, 1, @ERROR_MESSAGE);
	END CATCH

End
GO
/****** Object:  StoredProcedure [bbk].[Doctors_AddEdit]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [bbk].[Doctors_AddEdit]
(
	@APIKey varchar(100),
	@DoctorID varchar(50),
	@FullName varchar(100),
	@UserName varchar(100),
	@Password varchar(100),
	@Email varchar(100),
	@PhoneNumber varchar(20),
	@BloodBankCentreID varchar(50),
	@Specialty varchar(100),
	@LicenseNumber varchar(50),
	@LicenseExpirationDate date,
	@DateOfBirth date,
	@Gender varchar(10),
	@Address varchar(200),
	@LogUserID varchar(50) = '',
	@RetValue varchar(50) = '' OUT
)
AS
BEGIN
	SET NOCOUNT ON

	BEGIN TRY
		BEGIN TRANSACTION

	 

			IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END

		IF @DoctorID = ''
		BEGIN

			IF EXISTS(SELECT 1 FROM bbk.Doctors WHERE Email = @Email)
			BEGIN
				;THROW 50000, 'Email address already registered', 1;
			END
			IF EXISTS(SELECT 1 FROM bbk.Doctors WHERE PhoneNumber = @PhoneNumber)
			BEGIN
				;THROW 50000, 'Phone number already registered', 1;
			END
			IF EXISTS(SELECT 1 FROM bbk.Doctors WHERE LicenseNumber = @LicenseNumber)
			BEGIN
				;THROW 50000, 'License Number already registered', 1;
			END
			-- Get next primary key
			DECLARE @PrimaryKey varchar(50)
			EXEC adm.NumberFormat_Get 'bbk.Doctors', 'DoctorID', @PrimaryKey OUT 

			INSERT INTO bbk.Doctors (DoctorID, FullName, UserName, Password, Email, PhoneNumber, BloodBankCentreID, Specialty, LicenseNumber, LicenseExpirationDate, DateOfBirth, Gender, Address)
			VALUES (@PrimaryKey, @FullName, @UserName, @Password, @Email, @PhoneNumber, @BloodBankCentreID, @Specialty, @LicenseNumber, @LicenseExpirationDate, @DateOfBirth, @Gender, @Address)

			EXEC adm.NumberFormat_Set 'bbk.Doctors'

			SET @RetValue = @PrimaryKey

		END
		ELSE
		BEGIN

		IF EXISTS(SELECT DoctorID FROM bbk.Doctors WHERE Email = @Email AND DoctorID <> @DoctorID)
		BEGIN
			;THROW 50000, 'Email address already registered', 1;
		END

		IF EXISTS(SELECT DoctorID FROM bbk.Doctors WHERE PhoneNumber = @PhoneNumber AND DoctorID <> @DoctorID)
		BEGIN
			;THROW 50000, 'Phone number already registered', 1;
		END

		IF EXISTS(SELECT 1 FROM bbk.Doctors WHERE LicenseNumber = @LicenseNumber AND DoctorID <> @DoctorID)
		BEGIN
			;THROW 50000, 'License Number already registered', 1;
		END

			UPDATE bbk.Doctors SET 
				FullName = @FullName, 
				UserName = @UserName,
				Email = @Email, 
				PhoneNumber = @PhoneNumber, 
				BloodBankCentreID = @BloodBankCentreID,
				Specialty = @Specialty, 
				LicenseNumber = @LicenseNumber, 
				LicenseExpirationDate = @LicenseExpirationDate, 
				DateOfBirth = @DateOfBirth, 
				Gender = @Gender, 
				Address = @Address
			WHERE DoctorID = @DoctorID

			IF @Password <> ''
			BEGIN

				update bbk.Doctors SET 
					Password = @Password
				WHERE DoctorID = @DoctorID

			END

			SET @RetValue = @DoctorID

		END
		
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		DECLARE @ERROR_MESSAGE varchar(4000) = ERROR_MESSAGE();
		IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
		RAISERROR ('%s. Script: bbk.Doctors_AddEdit', 16, 1, @ERROR_MESSAGE);
	END CATCH
END
GO
/****** Object:  StoredProcedure [bbk].[Doctors_Count]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [bbk].[Doctors_Count]
(
	@APIKey varchar(100),
	@KeyW varchar(50)='',
	@LocationID varchar(50) = '',
	@BloodBankCentreID varchar(50) = '',
	@Specialty varchar(100) = '',
	@Gender varchar(10) = '')
As
Begin
	SET NOCOUNT ON
	BEGIN TRY
		
		-- Check for API Key
		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END


		select 	COUNT(*) as RecordCount
		
		from bbk.Doctors
		inner join bbk.BloodBankCentre on bbk.BloodBankCentre.BloodBankCentreID = bbk.Doctors.BloodBankCentreID
		inner join bbk.Location on bbk.BloodBankCentre.LocationID = bbk.Location.LocationID

		where FullName+' '+ LicenseNumber  LIKE '%' + @KeyW + '%'

        AND 
		CASE WHEN @LocationID = '' THEN 1
			 WHEN @LocationID <> '' AND bbk.BloodBankCentre.LocationID = @LocationID THEN 1
		END = 1
		AND 
		CASE WHEN @BloodBankCentreID = '' THEN 1
			 WHEN @BloodBankCentreID <> '' AND bbk.Doctors.BloodBankCentreID = @BloodBankCentreID THEN 1
		END = 1
		AND 
		CASE WHEN @Specialty = '' THEN 1
			 WHEN @Specialty <> '' AND bbk.Doctors.Specialty = @Specialty THEN 1
		END = 1
		AND 
		CASE WHEN @Gender = '' THEN 1
			 WHEN @Gender <> '' AND bbk.Doctors.Gender = @Gender THEN 1
		END = 1

		
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
		RAISERROR ('%s in "Doctors_Count"', 16, 1, @ERROR_MESSAGE);
	END CATCH

End
GO
/****** Object:  StoredProcedure [bbk].[Doctors_Delete]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [bbk].[Doctors_Delete]
(
	@APIKey varchar(100),
	@ID varchar(50),
	@LogUserID varchar(50) = '',
	@RetValue varchar(50) = '' OUT
)
AS
BEGIN
SET NOCOUNT ON
BEGIN TRY
	BEGIN TRANSACTION

	-- Check for API Key
	IF NOT EXISTS (SELECT KeyID FROM adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
	BEGIN
		;THROW 50000, 'Invalid API Key', 1;
	END

	-- Check for record
	IF NOT EXISTS (SELECT DoctorID FROM bbk.Doctors WHERE DoctorID = @ID)
	BEGIN
		;THROW 50000, 'Record not found', 1;
	END
	
	SET @RetValue = @ID
	DELETE FROM bbk.Doctors WHERE DoctorID = @ID

	COMMIT TRANSACTION
END TRY
BEGIN CATCH
    DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
    IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
    RAISERROR ('%s in "Doctor_Delete"', 16, 1, @ERROR_MESSAGE);
END CATCH
END
GO
/****** Object:  StoredProcedure [bbk].[Doctors_Get]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [bbk].[Doctors_Get]
(
	@APIKey varchar(100),
	@ID varchar(50) = ''
)	
AS
BEGIN
	SET NOCOUNT ON;
	BEGIN TRY
		
		-- Check for API Key
		IF NOT EXISTS (SELECT KeyID FROM adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END

		SELECT DoctorID, FullName, UserName, Password, Email, PhoneNumber, bbk.Doctors.BloodBankCentreID, Specialty, LicenseNumber, LicenseExpirationDate, DateOfBirth, Gender, Address
		FROM bbk.Doctors
		inner join bbk.BloodBankCentre on bbk.BloodBankCentre.BloodBankCentreID = bbk.Doctors.BloodBankCentreID
		inner join bbk.Location on bbk.BloodBankCentre.LocationID = bbk.Location.LocationID

		WHERE DoctorID = @ID

	END TRY
	BEGIN CATCH
		DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
		RAISERROR ('%s. Script: bbk.Doctor_Get', 16, 1, @ERROR_MESSAGE);
	END CATCH
END
GO
/****** Object:  StoredProcedure [bbk].[Doctors_GetByEmail]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create  PROCEDURE [bbk].[Doctors_GetByEmail]
(
    @APIKey varchar(100),
    @Email varchar(100)
)
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
        -- Check for API Key
        IF NOT EXISTS (SELECT KeyID FROM adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
        BEGIN
            ;THROW 50000, 'Invalid API Key', 1;
        END

        SELECT DoctorID, FullName, UserName, Password, Email, PhoneNumber, bbk.Doctors.BloodBankCentreID, Specialty, LicenseNumber, LicenseExpirationDate, DateOfBirth, Gender, Address
		FROM bbk.Doctors
		inner join bbk.BloodBankCentre on bbk.BloodBankCentre.BloodBankCentreID = bbk.Doctors.BloodBankCentreID
		inner join bbk.Location on bbk.BloodBankCentre.LocationID = bbk.Location.LocationID
        WHERE Email = @Email

    END TRY
    BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
        RAISERROR ('%s in "Doctor_GetByEmail"', 16, 1, @ERROR_MESSAGE);
    END CATCH
END
GO
/****** Object:  StoredProcedure [bbk].[Doctors_GetByUsername]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [bbk].[Doctors_GetByUsername]
(
    @APIKey varchar(100),
    @Username varchar(100)
)
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
        -- Check for API Key
        IF NOT EXISTS (SELECT KeyID FROM adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
        BEGIN
            ;THROW 50000, 'Invalid API Key', 1;
        END

        SELECT DoctorID, FullName, UserName, Password, Email, PhoneNumber, bbk.Doctors.BloodBankCentreID, Specialty, LicenseNumber, LicenseExpirationDate, DateOfBirth, Gender, Address
		FROM bbk.Doctors
		inner join bbk.BloodBankCentre on bbk.BloodBankCentre.BloodBankCentreID = bbk.Doctors.BloodBankCentreID
		inner join bbk.Location on bbk.BloodBankCentre.LocationID = bbk.Location.LocationID
        WHERE UserName = @Username

    END TRY
    BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
        RAISERROR ('%s in "Doctor_GetByUsername"', 16, 1, @ERROR_MESSAGE);
    END CATCH
END
GO
/****** Object:  StoredProcedure [bbk].[Doctors_List]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [bbk].[Doctors_List]
(
	@APIKey varchar(100),
	@KeyW varchar(50)='',
	@LocationID varchar(50) = '',
	@BloodBankCentreID varchar(50) = '',
	@Specialty varchar(100) = '',
	@Gender varchar(10) = '',
	@Page INT = 0,
	@PageSize INT = 99999
)
AS
BEGIN
	SET NOCOUNT ON
	BEGIN TRY
		
		-- Check for API Key
		IF NOT EXISTS (SELECT KeyID FROM adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END

		-- Set default value for page and page size
		IF @Page = 0 
		BEGIN
			SET @PageSize = 99999
			SET @Page = 1
		END

		SELECT DoctorID, FullName, UserName, Password, Email, PhoneNumber, bbk.Doctors.BloodBankCentreID, Specialty, LicenseNumber, LicenseExpirationDate, DateOfBirth, Gender, Address,
		BloodBankCentreName,LocationName , BloodBankCentreName+' ('+LocationName+')' as BloodBankCentre
		
		FROM bbk.Doctors
		inner join bbk.BloodBankCentre on bbk.BloodBankCentre.BloodBankCentreID = bbk.Doctors.BloodBankCentreID
		inner join bbk.Location on bbk.BloodBankCentre.LocationID = bbk.Location.LocationID

		where FullName+' '+ LicenseNumber  LIKE '%' + @KeyW + '%'

        AND 
		CASE WHEN @LocationID = '' THEN 1
			 WHEN @LocationID <> '' AND bbk.BloodBankCentre.LocationID = @LocationID THEN 1
		END = 1
		AND 
		CASE WHEN @BloodBankCentreID = '' THEN 1
			 WHEN @BloodBankCentreID <> '' AND bbk.Doctors.BloodBankCentreID = @BloodBankCentreID THEN 1
		END = 1
		AND 
		CASE WHEN @Specialty = '' THEN 1
			 WHEN @Specialty <> '' AND bbk.Doctors.Specialty = @Specialty THEN 1
		END = 1
		AND 
		CASE WHEN @Gender = '' THEN 1
			 WHEN @Gender <> '' AND bbk.Doctors.Gender = @Gender THEN 1
		END = 1

		ORDER BY FullName, LicenseNumber ASC
		OFFSET (@PageSize * (@Page - 1)) ROWS FETCH NEXT @PageSize ROWS ONLY;
		
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE VARCHAR(4000) = ERROR_MESSAGE();
		RAISERROR ('%s in "Doctors_List"', 16, 1, @ERROR_MESSAGE);
	END CATCH
END
GO
/****** Object:  StoredProcedure [bbk].[Location_AddEdit]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE   Procedure[bbk].[Location_AddEdit]
(
	@APIKey	varchar(100),
				   
	@LocationID	varchar(50),
	@LocationName  varchar(50),

	@LogUserID varchar(50) = '',
	@RetValue varchar(50) = '' OUT
)	
As
Begin
	SET NOCOUNT ON

	BEGIN TRY
		BEGIN TRANSACTION

		-- Check for API Key
		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END

		IF @LocationID = ''
		BEGIN
			IF EXISTS(select LocationID from bbk.Location where LocationName = @LocationName)
			BEGIN
				;THROW 50000, 'Location name already exists', 1;
			END

			-- Get next primary key
			DECLARE @PrimaryKey Varchar(50)
			exec adm.NumberFormat_Get 'bbk.Location','LocationID', @PrimaryKey OUT 

			INSERT INTO bbk.Location (LocationID, LocationName)
				values (@PrimaryKey, @LocationName)

			exec adm.NumberFormat_Set 'bbk.Location'

			SET @RetValue = @PrimaryKey

		END
		ELSE
		BEGIN
			IF EXISTS(select LocationID from bbk.Location where LocationName = @LocationName AND LocationID <> @LocationID)
			BEGIN
				;THROW 50000, 'Location name already exists', 1;
			END

			SET @RetValue = @LocationID

			update bbk.Location SET 
				LocationName = @LocationName
			WHERE LocationID = @LocationID

		END
		
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
        IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
        RAISERROR ('%s in "Location_AddEdit"', 16, 1, @ERROR_MESSAGE);
	END CATCH

End
GO
/****** Object:  StoredProcedure [bbk].[Location_Count]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   Procedure[bbk].[Location_Count]
(
	@APIKey	varchar(100),
				   
	@KeyW varchar(50) = ''
)	
As
Begin
	SET NOCOUNT ON
	BEGIN TRY
		
		-- Check for API Key
		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END


		select 	COUNT(*) as RecordCount
		
		from bbk.Location 

		where LocationName LIKE '%' + @KeyW + '%'
		
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
		RAISERROR ('%s in "Location_Count"', 16, 1, @ERROR_MESSAGE);
	END CATCH

End
GO
/****** Object:  StoredProcedure [bbk].[Location_Delete]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   Procedure[bbk].[Location_Delete]
(
	@APIKey	varchar(100),
	@ID varchar(50),

	@LogUserID varchar(50) = '',
	@RetValue varchar(50) = '' OUT
)	
As
Begin
	SET NOCOUNT ON

	BEGIN TRY
		BEGIN TRANSACTION

		-- Check for API Key
		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END

		-- Check for record
		IF NOT EXISTS (select LocationID from bbk.Location WHERE LocationID = @ID)
		BEGIN
			;THROW 50000, 'Record not found', 1;
		END

		IF EXISTS(select LocationID from bbk.BloodBankCentre where LocationID = @ID)
		BEGIN
			;THROW 50000, 'Data exist under this record', 1;
		END
		
		SET @RetValue = @ID
		delete from bbk.Location WHERE LocationID = @ID

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
        IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
        RAISERROR ('%s in "Location_Delete"', 16, 1, @ERROR_MESSAGE);
	END CATCH

End
GO
/****** Object:  StoredProcedure [bbk].[Location_Get]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   Procedure[bbk].[Location_Get]
(
	@APIKey	varchar(100),
	@ID varchar(50)
)	
As
Begin
	SET NOCOUNT ON
	BEGIN TRY
		
		-- Check for API Key
		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END

		select LocationID, LocationName
		from bbk.Location 

		where LocationID = @ID
		
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
		RAISERROR ('%s in "Location_Get"', 16, 1, @ERROR_MESSAGE);
	END CATCH

End
GO
/****** Object:  StoredProcedure [bbk].[Location_List]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   Procedure[bbk].[Location_List]
(
	@APIKey	varchar(100),
				   
	@KeyW varchar(50) = '',

	@Page int = 0,
	@PageSize int = 99999
)	
As
Begin
	SET NOCOUNT ON
	BEGIN TRY
		
		-- Check for API Key
		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END

		-- Set default value page and page size
		IF @Page = 0 
		BEGIN
			SET @PageSize = 99999
			SET @Page = 1
		END


		select LocationID, LocationName
		from bbk.Location 

		where LocationName LIKE '%' + @KeyW + '%'

		ORDER BY LocationName

		OFFSET (@PageSize*(@Page-1)) ROWS FETCH NEXT @PageSize ROWS ONLY;
		
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
		RAISERROR ('%s in "Location_List"', 16, 1, @ERROR_MESSAGE);
	END CATCH

End
GO
/****** Object:  StoredProcedure [bbk].[OutHospital_AddEdit]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [bbk].[OutHospital_AddEdit]
(
	@APIKey varchar(100),
	@HospitalID varchar(50),
	@HospitalName varchar(100),
	@Email varchar(100),
	@PhoneNumber varchar(20),
	@Address varchar(200),
	@Username varchar(50),
	@Password varchar(50),
	@ApprovedBy varchar(100),
	@LocationID varchar(50),
	@LogUserID varchar(50) = '',
	@RetValue varchar(50) = '' OUT
)
AS
BEGIN
	SET NOCOUNT ON

	BEGIN TRY
		BEGIN TRANSACTION

		IF NOT EXISTS (SELECT KeyID FROM adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END

		IF @HospitalID = ''
		BEGIN
			IF EXISTS(SELECT 1 FROM bbk.OutHospital WHERE Email = @Email)
			BEGIN
				;THROW 50000, 'Email address already registered', 1;
			END
			IF EXISTS(SELECT 1 FROM bbk.OutHospital WHERE Username = @Username)
			BEGIN
				;THROW 50000, 'Username already registered', 1;
			END
			IF EXISTS(SELECT 1 FROM bbk.OutHospital WHERE PhoneNumber = @PhoneNumber)
			BEGIN
				;THROW 50000, 'Phone number already registered', 1;
			END

			-- Get next primary key
			DECLARE @PrimaryKey varchar(50)
			EXEC adm.NumberFormat_Get 'bbk.OutHospital', 'HospitalID', @PrimaryKey OUT 

			INSERT INTO bbk.OutHospital (HospitalID, HospitalName, Email, PhoneNumber, Address, Username, Password, ApprovedBy, LocationID)
			VALUES (@PrimaryKey, @HospitalName, @Email, @PhoneNumber, @Address, @Username, @Password, @ApprovedBy, @LocationID)

			EXEC adm.NumberFormat_Set 'bbk.OutHospital'

			SET @RetValue = @PrimaryKey
		END
		ELSE
		BEGIN
			IF EXISTS(SELECT HospitalID FROM bbk.OutHospital WHERE Email = @Email AND HospitalID <> @HospitalID)
			BEGIN
				;THROW 50000, 'Email address already registered', 1;
			END
			IF EXISTS(SELECT HospitalID FROM bbk.OutHospital WHERE PhoneNumber = @PhoneNumber AND HospitalID <> @HospitalID)
			BEGIN
				;THROW 50000, 'Phone number already registered', 1;
			END

			IF EXISTS(SELECT 1 FROM bbk.OutHospital WHERE Username = @Username AND HospitalID <> @HospitalID)
			BEGIN
				;THROW 50000, 'Username already registered', 1;
			END

			UPDATE bbk.OutHospital SET 
				HospitalName = @HospitalName, 
				Email = @Email, 
				PhoneNumber = @PhoneNumber, 
				Address = @Address, 
				Username = @Username, 
				ApprovedBy = @ApprovedBy, 
				LocationID = @LocationID
			WHERE HospitalID = @HospitalID

			IF @Password <> ''
			BEGIN
				UPDATE bbk.OutHospital SET 
					Password = @Password
				WHERE HospitalID = @HospitalID
			END

			SET @RetValue = @HospitalID
		END

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		DECLARE @ERROR_MESSAGE varchar(4000) = ERROR_MESSAGE();
		IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
		RAISERROR ('%s. Script: bbk.OutHospital_AddEdit', 16, 1, @ERROR_MESSAGE);
	END CATCH
END
GO
/****** Object:  StoredProcedure [bbk].[OutHospital_Count]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [bbk].[OutHospital_Count]
(
    @APIKey varchar(100),
    @KeyW varchar(50) = '',
    @LocationID varchar(50) = ''
)	
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        -- Check for API Key
        IF NOT EXISTS (SELECT KeyID FROM adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
        BEGIN
            ;THROW 50000, 'Invalid API Key', 1;
        END

        SELECT COUNT(*) AS RecordCount
        FROM bbk.OutHospital
        INNER JOIN bbk.Location ON bbk.OutHospital.LocationID = bbk.Location.LocationID
        WHERE HospitalName LIKE '%' + @KeyW + '%'
        AND 
        CASE WHEN @LocationID = '' THEN 1
             WHEN @LocationID <> '' AND bbk.OutHospital.LocationID = @LocationID THEN 1
        END = 1;
		
    END TRY
    BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
        RAISERROR ('%s in "OutHospital_Count"', 16, 1, @ERROR_MESSAGE);
    END CATCH;
END;
GO
/****** Object:  StoredProcedure [bbk].[OutHospital_Delete]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [bbk].[OutHospital_Delete]
(
    @APIKey VARCHAR(100),
    @ID VARCHAR(50),
    @LogUserID VARCHAR(50) = '',
    @RetValue VARCHAR(50) = '' OUT
)
AS
BEGIN
    SET NOCOUNT ON

    BEGIN TRY
        BEGIN TRANSACTION

        -- Check for API Key
        IF NOT EXISTS (SELECT KeyID FROM adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
        BEGIN
            ;THROW 50000, 'Invalid API Key', 1;
        END

        -- Check for record
        IF NOT EXISTS (SELECT HospitalID FROM bbk.OutHospital WHERE HospitalID = @ID)
        BEGIN
            ;THROW 50000, 'Record not found', 1;
        END

        SET @RetValue = @ID
        DELETE FROM bbk.OutHospital WHERE HospitalID = @ID

        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
        DECLARE @ERROR_MESSAGE VARCHAR(4000) = ERROR_MESSAGE();
        IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
        RAISERROR ('%s in "OutHospital_Delete"', 16, 1, @ERROR_MESSAGE);
    END CATCH
END
GO
/****** Object:  StoredProcedure [bbk].[OutHospital_Get]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [bbk].[OutHospital_Get]
(
    @APIKey varchar(100),
    @ID varchar(50)
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        -- Check for API Key
        IF NOT EXISTS (SELECT KeyID FROM adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
        BEGIN
            ;THROW 50000, 'Invalid API Key', 1;
        END

        SELECT HospitalID, HospitalName, Email, PhoneNumber, Address, Username, Password, ApprovedBy, LocationID
        FROM bbk.OutHospital
        WHERE HospitalID = @ID;

    END TRY
    BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000) = ERROR_MESSAGE();
        RAISERROR ('%s in "OutHospital_Get"', 16, 1, @ERROR_MESSAGE);
    END CATCH;
END;
GO
/****** Object:  StoredProcedure [bbk].[OutHospital_GetByEmail]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [bbk].[OutHospital_GetByEmail]
(
    @APIKey varchar(100),
    @Email varchar(100)
)
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
        -- Check for API Key
        IF NOT EXISTS (SELECT KeyID FROM adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
        BEGIN
            ;THROW 50000, 'Invalid API Key', 1;
        END

        SELECT HospitalID, HospitalName, Email, PhoneNumber, Address, Username, Password, ApprovedBy, LocationID
        FROM bbk.OutHospital
        WHERE Email = @Email;
    END TRY
    BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
        RAISERROR ('%s in "OutHospital_GetByEmail"', 16, 1, @ERROR_MESSAGE);
    END CATCH
END
GO
/****** Object:  StoredProcedure [bbk].[OutHospital_GetByUsername]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [bbk].[OutHospital_GetByUsername]
(
    @APIKey varchar(100),
    @Username varchar(100)
)
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
        -- Check for API Key
        IF NOT EXISTS (SELECT KeyID FROM adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
        BEGIN
            ;THROW 50000, 'Invalid API Key', 1;
        END

        SELECT HospitalID, HospitalName, Email, PhoneNumber, Address, Username, Password, ApprovedBy, LocationID
        FROM bbk.OutHospital
        WHERE Username = @Username;
    END TRY
    BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
        RAISERROR ('%s in "OutHospital_GetByUsername"', 16, 1, @ERROR_MESSAGE);
    END CATCH
END
GO
/****** Object:  StoredProcedure [bbk].[OutHospital_List]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [bbk].[OutHospital_List]
(
	@APIKey VARCHAR(100),
	@KeyW VARCHAR(50) = '',
	@LocationID VARCHAR(50) = '',
	@Page INT = 0,
	@PageSize INT = 99999
)
AS
BEGIN
	SET NOCOUNT ON
	BEGIN TRY
		
		-- Check for API Key
		IF NOT EXISTS (SELECT KeyID FROM adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END

		-- Set default value for page and page size
		IF @Page = 0 
		BEGIN
			SET @PageSize = 99999
			SET @Page = 1
		END

		SELECT HospitalID, HospitalName, Email, PhoneNumber, Address, ApprovedBy, bbk.OutHospital.LocationID, LocationName
		FROM bbk.OutHospital
		INNER JOIN bbk.Location ON bbk.OutHospital.LocationID = bbk.Location.LocationID
		WHERE HospitalName LIKE '%' + @KeyW + '%'
		AND
		CASE 
			WHEN @LocationID = '' THEN 1
			WHEN @LocationID <> '' AND bbk.OutHospital.LocationID = @LocationID THEN 1
		END = 1
		ORDER BY HospitalName, LocationName ASC
		OFFSET (@PageSize * (@Page - 1)) ROWS FETCH NEXT @PageSize ROWS ONLY;
		
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE VARCHAR(4000) = ERROR_MESSAGE();
		RAISERROR ('%s in "OutHospital_List"', 16, 1, @ERROR_MESSAGE);
	END CATCH
END
GO
/****** Object:  StoredProcedure [dnr].[BloodRecord_AddEdit]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dnr].[BloodRecord_AddEdit]
(
	@APIKey varchar(100),
	@BloodRecordID varchar(50),
	@BloodBankCentreID varchar(50),
	@DonationID varchar(50),
	@ProcessedDate date,
	@ExpirationDate date,
	
	@Location varchar(100),
	@LogUserID varchar(50) = '',
	@RetValue varchar(50) = '' OUT
)
AS
BEGIN
	SET NOCOUNT ON

	BEGIN TRY
		BEGIN TRANSACTION

		IF NOT EXISTS (SELECT KeyID FROM adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END

		IF @BloodRecordID = ''
		BEGIN
			-- Get next primary key
			DECLARE @PrimaryKey varchar(50)
			EXEC adm.NumberFormat_Get 'dnr.BloodRecord', 'BloodRecordID', @PrimaryKey OUT 

			INSERT INTO dnr.BloodRecord (BloodRecordID, BloodBankCentreID, DonationID, ProcessedDate, ExpirationDate, Location)
			VALUES (@PrimaryKey, @BloodBankCentreID, @DonationID, @ProcessedDate, @ExpirationDate, @Location)

			EXEC adm.NumberFormat_Set 'dnr.BloodRecord'

			SET @RetValue = @PrimaryKey

		END
		ELSE
		BEGIN
			UPDATE dnr.BloodRecord SET 
				BloodBankCentreID = @BloodBankCentreID,
				DonationID = @DonationID,
				ProcessedDate = @ProcessedDate,
				ExpirationDate = @ExpirationDate,
			 
				Location = @Location
			WHERE BloodRecordID = @BloodRecordID

			SET @RetValue = @BloodRecordID
		END
		
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		DECLARE @ERROR_MESSAGE varchar(4000) = ERROR_MESSAGE();
		IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
		RAISERROR ('%s. Script: dnr.BloodRecord_AddEdit', 16, 1, @ERROR_MESSAGE);
	END CATCH
END
GO
/****** Object:  StoredProcedure [dnr].[BloodRecord_Count]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   Procedure [dnr].[BloodRecord_Count]
(
	@APIKey	varchar(100),
				   
	@KeyW varchar(50) = '',
	@DonorID VARCHAR(50) = '',
	@NIC VARCHAR(50) = '',
	@ProcessedDate Datetime2(7) = '',
	@DonationDate Datetime2(7) = '',
	@BloodBankCentreID VARCHAR(50) = '',
	@Status VARCHAR(50) = ''
)	
As
Begin
	SET NOCOUNT ON
	BEGIN TRY
		
		-- Check for API Key
		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END


		SELECT COUNT(*) AS RecordCount
		FROM dnr.BloodRecord
		INNER JOIN dnr.DonarDonation ON dnr.BloodRecord.DonationID = dnr.DonarDonation.DonotionID
		INNER JOIN dnr.Donor ON dnr.DonarDonation.DonorID = dnr.Donor.DonorID
		where Name + ' '  LIKE '%' + @KeyW + '%'

		AND
		CASE WHEN @DonorID = '' THEN 1
			 WHEN @DonorID <> '' AND dnr.DonarDonation.DonorID = @DonorID THEN 1
		END = 1


		AND CASE
       WHEN @ProcessedDate = '' THEN 1
       WHEN @ProcessedDate <> '' AND CONVERT(VARCHAR(10), dnr.BloodRecord.ProcessedDate, 120) = @ProcessedDate THEN 1
		END = 1
		 


		AND CASE
       WHEN @DonationDate = '' THEN 1
       WHEN @DonationDate <> '' AND CONVERT(VARCHAR(10), dnr.DonarDonation.DonationDate, 120) = @DonationDate THEN 1
		END = 1
		AND
		CASE WHEN @BloodBankCentreID = '' THEN 1
			 WHEN @BloodBankCentreID <> '' AND dnr.DonarDonation.BloodBankCentreID = @BloodBankCentreID THEN 1
		END = 1

		AND
		CASE WHEN @NIC = '' THEN 1
			 WHEN @NIC <> '' AND dnr.Donor.NIC = @NIC THEN 1
		END = 1

		AND
		CASE WHEN @Status = '' THEN 1
			 WHEN @Status <> '' AND dnr.DonarDonation.Status = @Status THEN 1
		END = 1

		
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
		RAISERROR ('%s. Script: dnr.TestRecord_Count', 16, 1, @ERROR_MESSAGE);
	END CATCH

End
GO
/****** Object:  StoredProcedure [dnr].[BloodRecord_Get]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dnr].[BloodRecord_Get]
(
	@APIKey	varchar(100),
				   
	@ID varchar(50) = ''
)	
As
Begin
	SET NOCOUNT ON
	BEGIN TRY
		
		-- Check for API Key
		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END


		SELECT
			BloodRecordID,
			dnr.BloodRecord.BloodBankCentreID,
			dnr.BloodRecord.DonationID,
			dnr.BloodRecord.ProcessedDate,
			dnr.BloodRecord.ExpirationDate,
			dnr.DonarDonation.Status,
			dnr.BloodRecord.Location
		FROM dnr.BloodRecord
		INNER JOIN dnr.DonarDonation ON dnr.BloodRecord.DonationID = dnr.DonarDonation.DonotionID
		INNER JOIN dnr.Donor ON dnr.DonarDonation.DonorID = dnr.Donor.DonorID

		where DonationID = @ID

		
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
		RAISERROR ('%s. Script: dnr.TestRecord_List', 16, 1, @ERROR_MESSAGE);
	END CATCH

End
GO
/****** Object:  StoredProcedure [dnr].[BloodRecord_List]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   Procedure [dnr].[BloodRecord_List]
(
	 
	@APIKey	varchar(100),
				   
	@KeyW varchar(50) = '',
	@DonorID VARCHAR(50) = '',
	@NIC VARCHAR(50) = '',
	@ProcessedDate Datetime2(7) = '',
	@DonationDate Datetime2(7) = '',
	@BloodBankCentreID VARCHAR(50) = '',
	@Status VARCHAR(50) = '',			   
	@Page int = 0,
	@PageSize int = 99999
)	
 	
As
Begin
	SET NOCOUNT ON
	BEGIN TRY
		
		-- Check for API Key
		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END

			-- Set default value page and page size
		IF @Page = 0 
		BEGIN
			SET @PageSize = 99999
			SET @Page = 1
		END

		SELECT
			BloodRecordID,
			dnr.BloodRecord.BloodBankCentreID,
			dnr.BloodRecord.DonationID,
			dnr.BloodRecord.ProcessedDate,
			dnr.BloodRecord.ExpirationDate,
			dnr.DonarDonation.Status,
			dnr.BloodRecord.Location
		FROM dnr.BloodRecord
		INNER JOIN dnr.DonarDonation ON dnr.BloodRecord.DonationID = dnr.DonarDonation.DonotionID
		INNER JOIN dnr.Donor ON dnr.DonarDonation.DonorID = dnr.Donor.DonorID

		where Name + ' '  LIKE '%' + @KeyW + '%'

		AND
		CASE WHEN @DonorID = '' THEN 1
			 WHEN @DonorID <> '' AND dnr.DonarDonation.DonorID = @DonorID THEN 1
		END = 1


		AND CASE
       WHEN @ProcessedDate = '' THEN 1
       WHEN @ProcessedDate <> '' AND CONVERT(VARCHAR(10), dnr.BloodRecord.ProcessedDate, 120) = @ProcessedDate THEN 1
		END = 1
		 


		AND CASE
       WHEN @DonationDate = '' THEN 1
       WHEN @DonationDate <> '' AND CONVERT(VARCHAR(10), dnr.DonarDonation.DonationDate, 120) = @DonationDate THEN 1
		END = 1
		AND
		CASE WHEN @BloodBankCentreID = '' THEN 1
			 WHEN @BloodBankCentreID <> '' AND dnr.DonarDonation.BloodBankCentreID = @BloodBankCentreID THEN 1
		END = 1

		AND
		CASE WHEN @NIC = '' THEN 1
			 WHEN @NIC <> '' AND dnr.Donor.NIC = @NIC THEN 1
		END = 1

		AND
		CASE WHEN @Status = '' THEN 1
			 WHEN @Status <> '' AND dnr.DonarDonation.Status = @Status THEN 1
		END = 1

		ORDER BY DonationDate asc
		OFFSET (@PageSize*(@Page-1)) ROWS FETCH NEXT @PageSize ROWS ONLY;

		
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
		RAISERROR ('%s. Script: dnr.TestRecord_List', 16, 1, @ERROR_MESSAGE);
	END CATCH

End
GO
/****** Object:  StoredProcedure [dnr].[DonarDonation_AddEdit]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   Procedure [dnr].[DonarDonation_AddEdit]
(
	@APIKey varchar(100),
	@DonotionID varchar(50),
	@DonorID varchar(50),
	@BloodBankCentreID varchar(50),
	@DonationDate datetime2(7),
	@QuestionnaireID varchar(50),
	@DoctorID varchar(50),
	@Examination varchar(100),
	@Pulse float,
	@BP varchar(50),
	@HBLevel float,
	@Weight float,
	@Remark VARCHAR(50),
	@NextDonationDate datetime2(7),
	@BloodBagNo varchar(50),
	@Status varchar(50),
	@RemarkRejected varchar(200),
	@FeedBack varchar(500),
	@LogUserID varchar(50) = '',
	@RetValue varchar(50) = '' OUT
)
AS
BEGIN
	SET NOCOUNT ON

	BEGIN TRY
		BEGIN TRANSACTION

		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END

		IF @DonotionID = ''
		BEGIN
			-- Get next primary key
			DECLARE @PrimaryKey varchar(50)
			EXEC adm.NumberFormat_Get 'dnr.DonarDonation', 'DonotionID', @PrimaryKey OUT 

			INSERT INTO dnr.DonarDonation (DonotionID, DonorID, BloodBankCentreID, DonationDate, QuestionnaireID, DoctorID, Examination, Pulse, BP, HBLevel, Weight, Remark, NextDonationDate, BloodBagNo, Status, RemarkRejected,FeedBack)
			VALUES (@PrimaryKey, @DonorID, @BloodBankCentreID, @DonationDate, @QuestionnaireID, @DoctorID, @Examination, @Pulse, @BP, @HBLevel, @Weight, @Remark, @NextDonationDate, @BloodBagNo, @Status, @RemarkRejected,@FeedBack)

			EXEC adm.NumberFormat_Set 'dnr.DonarDonation'

			SET @RetValue = @PrimaryKey

		END
		ELSE
		BEGIN
			UPDATE dnr.DonarDonation SET 
				DonorID = @DonorID, 
				BloodBankCentreID = @BloodBankCentreID, 
				DonationDate = @DonationDate, 
				QuestionnaireID = @QuestionnaireID, 
				DoctorID = @DoctorID,
				Examination = @Examination,
				Pulse = @Pulse,
				BP = @BP,
				HBLevel = @HBLevel,
				Weight = @Weight,
				Remark = @Remark,
				NextDonationDate = @NextDonationDate,
				BloodBagNo = @BloodBagNo,
				Status = @Status,
				RemarkRejected = @RemarkRejected,
				FeedBack =@FeedBack
			WHERE DonotionID = @DonotionID

			SET @RetValue = @DonotionID
		END
		
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		DECLARE @ERROR_MESSAGE varchar(4000) = ERROR_MESSAGE();
		IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
		RAISERROR ('%s. Script: dnr.DonarDonation_AddEdit', 16, 1, @ERROR_MESSAGE);
	END CATCH
eND
GO
/****** Object:  StoredProcedure [dnr].[DonarDonation_Count]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   Procedure [dnr].[DonarDonation_Count]
(
	@APIKey	varchar(100),
				   
	@KeyW varchar(50) = '',
	@DonorID VARCHAR(50) = '',
	@NIC VARCHAR(50) = '',
	@DonationDate datetime2(7) = '',
	@BloodBankCentreID VARCHAR(50) = '',
	@DoctorID varchar(50)='',
	@Status VARCHAR(50) = ''
)	
As
Begin
	SET NOCOUNT ON
	BEGIN TRY
		
		-- Check for API Key
		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END


		SELECT COUNT(*) AS RecordCount
		FROM dnr.DonarDonation 
		inner join dnr.Donor on dnr.DonarDonation.DonorID = dnr.Donor.DonorID

		where Name + ' '  LIKE '%' + @KeyW + '%'

		AND
		CASE WHEN @DonorID = '' THEN 1
			 WHEN @DonorID <> '' AND dnr.DonarDonation.DonorID = @DonorID THEN 1
		END = 1

			 AND
		CASE WHEN @DoctorID = '' THEN 1
			 WHEN @DoctorID <> '' AND dnr.DonarDonation.DoctorID = @DoctorID THEN 1
		END = 1

		--AND
		--CASE WHEN @DonationDate = '' THEN 1
		--	 WHEN @DonationDate <> '' AND dnr.DonarDonation.DonationDate = @DonationDate THEN 1
		--END = 1

		AND
		CASE WHEN @BloodBankCentreID = '' THEN 1
			 WHEN @BloodBankCentreID <> '' AND dnr.DonarDonation.BloodBankCentreID = @BloodBankCentreID THEN 1
		END = 1

		AND
		CASE WHEN @NIC = '' THEN 1
			 WHEN @NIC <> '' AND dnr.Donor.NIC = @NIC THEN 1
		END = 1

		AND
		CASE WHEN @Status = '' THEN 1
			 WHEN @Status <> '' AND dnr.DonarDonation.Status = @Status THEN 1
		END = 1

		
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
		RAISERROR ('%s. Script: dnr.Donor_Count', 16, 1, @ERROR_MESSAGE);
	END CATCH

End
GO
/****** Object:  StoredProcedure [dnr].[DonarDonation_Get]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   Procedure [dnr].[DonarDonation_Get]
(
	@APIKey	varchar(100),
				   
	@ID varchar(50) = ''
)	
As
Begin
	SET NOCOUNT ON
	BEGIN TRY
		
		-- Check for API Key
		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END

	SELECT 
    dnr.DonarDonation.DonotionID,
    dnr.DonarDonation.DonorID,
    dnr.DonarDonation.BloodBankCentreID,
    CASE 
        WHEN dnr.DonarDonation.BloodBankCentreID IS NULL THEN ''
        ELSE [BloodBankCentreName] + ' (' + [LocationName] + ')'
    END AS BloodBankCentre,
    NULLIF(dnr.DonarDonation.DonationDate, '1900-01-01 00:00:00.0000000') AS DonationDate,
    dnr.DonarDonation.QuestionnaireID,
    dnr.DonarDonation.DoctorID,
    dnr.DonarDonation.Examination,
    dnr.DonarDonation.Pulse,
    dnr.DonarDonation.BP,
    dnr.DonarDonation.HBLevel,
    dnr.DonarDonation.Weight,
    dnr.DonarDonation.Remark,
	FeedBack,
    NULLIF(dnr.DonarDonation.NextDonationDate, '1900-01-01 00:00:00.0000000') AS NextDonationDate,
    dnr.DonarDonation.BloodBagNo,
    dnr.DonarDonation.Status,
    dnr.Donor.Name,
    dnr.Donor.NIC,
    dnr.Donor.Email,
    dnr.Donor.Password,
    dnr.Donor.PhoneNumber,
    dnr.Donor.OtherPhoneNumber,
    dnr.Donor.DonationFrequency,
    dnr.Donor.Occupation,
    dnr.Donor.MaritalStatus,
    dnr.Donor.Address,
    dnr.Donor.DateOfBirth,
    dnr.Donor.Location,
    dnr.Donor.Gender,
    dnr.Donor.BloodType,
	bbk.Doctors.FullName as 'DoctorName',
	bbk.Doctors.Specialty,
	dnr.TestRecord.TestRecordPdfFile,
	DATEDIFF(YEAR, dnr.Donor.DateOfBirth, GETDATE()) AS Age
	
FROM 
    dnr.DonarDonation 
    INNER JOIN dnr.Donor 
        ON dnr.DonarDonation.DonorID = dnr.Donor.DonorID
    LEFT JOIN [bbk].[BloodBankCentre] 
        ON dnr.DonarDonation.BloodBankCentreID = [bbk].[BloodBankCentre].[BloodBankCentreID]
    LEFT JOIN [bbk].[Location] 
        ON [bbk].[BloodBankCentre].[LocationID] = [bbk].[Location].[LocationID]
	LEFT JOIN [bbk].[Doctors] 
        ON [bbk].[Doctors].[DoctorID] = [dnr].[DonarDonation].[DoctorID]
	Left JOIN [dnr].[TestRecord] 
        ON [dnr].[TestRecord].[DonationID] = [dnr].[DonarDonation].[DonotionID]


	where dnr.DonarDonation.DonotionID = @ID

		
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
		RAISERROR ('%s. Script: dnr.DonarDonation_List', 16, 1, @ERROR_MESSAGE);
	END CATCH

End
GO
/****** Object:  StoredProcedure [dnr].[DonarDonation_List]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   Procedure [dnr].[DonarDonation_List]
(
	 
	@APIKey	varchar(100),
				   
	@KeyW varchar(50) = '',
	@DonorID VARCHAR(50) = '',
	@NIC VARCHAR(50) = '',
	@DonationDate Datetime2(7) = '',
	@BloodBankCentreID VARCHAR(50) = '',
	@DoctorID varchar(50)='',
	@Status VARCHAR(50) = '',			   
	@Page int = 0,
	@PageSize int = 99999
)	
 	
As
Begin
	SET NOCOUNT ON
	BEGIN TRY
		
		-- Check for API Key
		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END

			-- Set default value page and page size
		IF @Page = 0 
		BEGIN
			SET @PageSize = 99999
			SET @Page = 1
		END

	SELECT 
    dnr.DonarDonation.DonotionID,
    dnr.DonarDonation.DonorID,
    dnr.DonarDonation.BloodBankCentreID,
    CASE 
        WHEN dnr.DonarDonation.BloodBankCentreID IS NULL THEN ''
        ELSE [BloodBankCentreName] + ' (' + [LocationName] + ')'
    END AS BloodBankCentre,
    NULLIF(dnr.DonarDonation.DonationDate, '1900-01-01 00:00:00.0000000') AS DonationDate,
    dnr.DonarDonation.QuestionnaireID,
    dnr.DonarDonation.DoctorID,
    dnr.DonarDonation.Examination,
    dnr.DonarDonation.Pulse,
    dnr.DonarDonation.BP,
    dnr.DonarDonation.HBLevel,
    dnr.DonarDonation.Weight,
    dnr.DonarDonation.Remark,
	FeedBack,
    NULLIF(dnr.DonarDonation.NextDonationDate, '1900-01-01 00:00:00.0000000') AS NextDonationDate,
    dnr.DonarDonation.BloodBagNo,
    dnr.DonarDonation.Status,
    dnr.Donor.Name,
    dnr.Donor.NIC,
    dnr.Donor.Email,
    dnr.Donor.Password,
    dnr.Donor.PhoneNumber,
    dnr.Donor.OtherPhoneNumber,
    dnr.Donor.DonationFrequency,
    dnr.Donor.Occupation,
    dnr.Donor.MaritalStatus,
    dnr.Donor.Address,
    dnr.Donor.DateOfBirth,
    dnr.Donor.Location,
    dnr.Donor.Gender,
    dnr.Donor.BloodType,
	bbk.Doctors.FullName as 'DoctorName',
	bbk.Doctors.Specialty,
	dnr.TestRecord.TestRecordPdfFile,
	DATEDIFF(YEAR, dnr.Donor.DateOfBirth, GETDATE()) AS Age
	
FROM 
    dnr.DonarDonation 
    INNER JOIN dnr.Donor 
        ON dnr.DonarDonation.DonorID = dnr.Donor.DonorID
    LEFT JOIN [bbk].[BloodBankCentre] 
        ON dnr.DonarDonation.BloodBankCentreID = [bbk].[BloodBankCentre].[BloodBankCentreID]
    LEFT JOIN [bbk].[Location] 
        ON [bbk].[BloodBankCentre].[LocationID] = [bbk].[Location].[LocationID]
	LEFT JOIN [bbk].[Doctors] 
        ON [bbk].[Doctors].[DoctorID] = [dnr].[DonarDonation].[DoctorID]
	Left JOIN [dnr].[TestRecord] 
        ON [dnr].[TestRecord].[DonationID] = [dnr].[DonarDonation].[DonotionID]

		where Name +''+NIC + ' ' + dnr.DonarDonation.DonorID +''  LIKE '%' + @KeyW + '%'

		AND
		CASE WHEN @DonorID = '' THEN 1
			 WHEN @DonorID <> '' AND dnr.DonarDonation.DonorID = @DonorID THEN 1
		END = 1

		 AND
		CASE WHEN @DoctorID = '' THEN 1
			 WHEN @DoctorID <> '' AND dnr.DonarDonation.DoctorID = @DoctorID THEN 1
		END = 1
		AND CASE
       WHEN @DonationDate = '' THEN 1
       WHEN @DonationDate <> '' AND CONVERT(VARCHAR(10), dnr.DonarDonation.DonationDate, 120) = @DonationDate THEN 1
		END = 1

		AND
		CASE WHEN @BloodBankCentreID = '' THEN 1
			 WHEN @BloodBankCentreID <> '' AND dnr.DonarDonation.BloodBankCentreID = @BloodBankCentreID THEN 1
		END = 1

		AND
		CASE WHEN @NIC = '' THEN 1
			 WHEN @NIC <> '' AND dnr.Donor.NIC = @NIC THEN 1
		END = 1

		AND
		CASE WHEN @Status = '' THEN 1
			 WHEN @Status <> '' AND dnr.DonarDonation.Status = @Status THEN 1
		END = 1

		ORDER BY DonationDate desc
		OFFSET (@PageSize*(@Page-1)) ROWS FETCH NEXT @PageSize ROWS ONLY;

		
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
		RAISERROR ('%s. Script: dnr.DonarDonation_List', 16, 1, @ERROR_MESSAGE);
	END CATCH

End
GO
/****** Object:  StoredProcedure [dnr].[Donor_AddEdit]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   Procedure [dnr].[Donor_AddEdit]
(
	@APIKey varchar(100),
	@DonorID varchar(50),
	@Name varchar(50),
	@NIC varchar(50),
	@Email varchar(100),
	@Password varchar(50),
	@PhoneNumber varchar(20),
	@OtherPhoneNumber varchar(20) ,
	@DonationFrequency int ,
	@Occupation varchar(50) ,
	@MaritalStatus varchar(20),
	@Address varchar(200) ,
	@DateOfBirth date ,
	@Location varchar(50) ,
	@Gender varchar(10) ,
	@BloodType varchar(5) ,
	@LogUserID varchar(50) = '',
	@RetValue varchar(50) = '' OUT
)
AS
BEGIN
	SET NOCOUNT ON

	BEGIN TRY
		BEGIN TRANSACTION

		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END

		IF @DonorID = ''
		BEGIN

			IF EXISTS(SELECT 1 FROM dnr.Donor WHERE NIC = @NIC and Email = @Email)
			BEGIN
				;THROW 50000, 'NIC already registered', 1;
			END
			IF EXISTS(SELECT 1 FROM dnr.Donor WHERE Email = @Email)
			BEGIN
				;THROW 50000, 'Email address already registered', 1;
			END
			IF EXISTS(SELECT 1 FROM dnr.Donor WHERE PhoneNumber = @PhoneNumber)
			BEGIN
				;THROW 50000, 'Phone number already registered', 1;
			END

			DECLARE @Age INT
			SET @Age = DATEDIFF(YEAR, @DateOfBirth, GETDATE())

			IF @Age < 18
			BEGIN
				;THROW 50000, 'Donor should be at least 18 years old', 1;
			END

			-- Get next primary key
			DECLARE @PrimaryKey varchar(50)
			EXEC adm.NumberFormat_Get 'dnr.Donor', 'DonorID', @PrimaryKey OUT 

			INSERT INTO dnr.Donor (DonorID, Name, NIC, Email, Password, PhoneNumber, OtherPhoneNumber, DonationFrequency, Occupation, MaritalStatus, Address, DateOfBirth, Location, Gender, BloodType)
			VALUES (@PrimaryKey, @Name, @NIC, @Email, @Password, @PhoneNumber, @OtherPhoneNumber, @DonationFrequency, @Occupation, @MaritalStatus, @Address, @DateOfBirth, @Location, @Gender, @BloodType)

			EXEC adm.NumberFormat_Set 'dnr.Donor'

			SET @RetValue = @PrimaryKey

		END
		ELSE
		BEGIN

		IF EXISTS(SELECT DonorID FROM dnr.Donor WHERE NIC = @NIC AND DonorID <> @DonorID)
		BEGIN
			;THROW 50000, 'NIC already registered', 1;
		END

		IF EXISTS(SELECT DonorID FROM dnr.Donor WHERE Email = @Email AND DonorID <> @DonorID)
		BEGIN
			;THROW 50000, 'Email address already registered', 1;
		END

		IF EXISTS(SELECT DonorID FROM dnr.Donor WHERE PhoneNumber = @PhoneNumber AND DonorID <> @DonorID)
		BEGIN
			;THROW 50000, 'Phone number already registered', 1;
		END

			UPDATE dnr.Donor SET 
				Name = @Name, 
				NIC = @NIC, 
				Email = @Email, 
				PhoneNumber = @PhoneNumber, 
				OtherPhoneNumber = @OtherPhoneNumber, 
				DonationFrequency = @DonationFrequency, 
				Occupation = @Occupation, 
				MaritalStatus = @MaritalStatus, 
				Address = @Address, 
				DateOfBirth = @DateOfBirth, 
				Location = @Location, 
				Gender = @Gender, 
				BloodType = @BloodType
			WHERE DonorID = @DonorID

			IF @Password <> ''
			BEGIN

				update dnr.Donor SET 
					Password = @Password
				WHERE DonorID = @DonorID

			END

			SET @RetValue = @DonorID

		END
		
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		DECLARE @ERROR_MESSAGE varchar(4000) = ERROR_MESSAGE();
		IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
		RAISERROR ('%s. Script: dnr.Donor_AddEdit', 16, 1, @ERROR_MESSAGE);
	END CATCH
END
GO
/****** Object:  StoredProcedure [dnr].[Donor_Count]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   Procedure [dnr].[Donor_Count]
(
	@APIKey	varchar(100),
				   
	@KeyW varchar(50) = '',
	@BloodType VARCHAR(5) = '',
	@Gender VARCHAR(10) = '',
	@Location VARCHAR(50) = '',
	@DateOfBirth DATE = ''
)	
As
Begin
	SET NOCOUNT ON
	BEGIN TRY
		
		-- Check for API Key
		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END


		SELECT COUNT(*) AS RecordCount
		FROM dnr.Donor 

		where Name + ' '  LIKE '%' + @KeyW + '%'

		AND
		CASE WHEN @BloodType = '' THEN 1
			 WHEN @BloodType <> '' AND dnr.Donor.BloodType = @BloodType THEN 1
		END = 1

		AND
		CASE WHEN @Gender = '' THEN 1
			 WHEN @Gender <> '' AND dnr.Donor.Gender = @Gender THEN 1
		END = 1

		AND
		CASE WHEN @Location = '' THEN 1
			 WHEN @Location <> '' AND dnr.Donor.Location = @Location THEN 1
		END = 1

		AND
		CASE WHEN @DateOfBirth = '' THEN 1
			 WHEN @DateOfBirth <> '' AND dnr.Donor.DateOfBirth = @DateOfBirth THEN 1
		END = 1

		
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
		RAISERROR ('%s. Script: dnr.Donor_Count', 16, 1, @ERROR_MESSAGE);
	END CATCH

End
GO
/****** Object:  StoredProcedure [dnr].[Donor_Delete]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   Procedure [dnr].[Donor_Delete]
(
	@APIKey	varchar(100),
	@ID varchar(50),

	@LogUserID varchar(50) = '',
	@RetValue varchar(50) = '' OUT
)	
As
Begin
	SET NOCOUNT ON

	BEGIN TRY
		BEGIN TRANSACTION

		-- Check for API Key
		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END

		-- Check for record
		IF NOT EXISTS (select DonorID from dnr.Donor WHERE DonorID = @ID)
		BEGIN
			;THROW 50000, 'Record not found', 1;
		END

		SET @RetValue = @ID

		delete from  dnr.Donor WHERE DonorID = @ID
	 
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
        IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
        RAISERROR ('%s. Script: dnr.Donor_Delete', 16, 1, @ERROR_MESSAGE);
	END CATCH

End
GO
/****** Object:  StoredProcedure [dnr].[Donor_Get]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   Procedure [dnr].[Donor_Get]
(
	@APIKey	varchar(100),
				   
	@ID varchar(50) = ''
)	
As
Begin
	SET NOCOUNT ON
	BEGIN TRY
		
		-- Check for API Key
		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END


		SELECT DonorID, Name, NIC, Email, Password, PhoneNumber, OtherPhoneNumber, DonationFrequency, Occupation, MaritalStatus, Address, DateOfBirth, Location, Gender, BloodType
		,DATEDIFF(YEAR, dnr.Donor.DateOfBirth, GETDATE()) AS Age
		FROM dnr.Donor 

		
		where DonorID = @ID

		
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
		RAISERROR ('%s. Script: dnr.Donor_List', 16, 1, @ERROR_MESSAGE);
	END CATCH

End
GO
/****** Object:  StoredProcedure [dnr].[Donor_GetByEmail]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   Procedure [dnr].[Donor_GetByEmail]
(
	@APIKey	varchar(100),
	@Email varchar(50)
)	
As
Begin
	SET NOCOUNT ON
	BEGIN TRY
		
		-- Check for API Key
		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END

		SELECT DonorID, Name, NIC, Email, Password, PhoneNumber, OtherPhoneNumber, DonationFrequency, Occupation, MaritalStatus, Address, DateOfBirth, Location, Gender, BloodType
		FROM dnr.Donor 

		
		where Email = @Email

		
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
		RAISERROR ('%s in "Donor_GetByEmail"', 16, 1, @ERROR_MESSAGE);
	END CATCH

End
GO
/****** Object:  StoredProcedure [dnr].[Donor_List]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   Procedure [dnr].[Donor_List]
(
	@APIKey	varchar(100),
				   
	@KeyW varchar(50) = '',
	@BloodType VARCHAR(5) = '',
	@Gender VARCHAR(10) = '',
	@Location VARCHAR(50) = '',
	@DateOfBirth DATE = '',
	
	@Page int = 0,
	@PageSize int = 99999
	)	
As
Begin
	SET NOCOUNT ON
	BEGIN TRY
		
		-- Check for API Key
		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END

		-- Set default value page and page size
		IF @Page = 0 
		BEGIN
			SET @PageSize = 99999
			SET @Page = 1
		END

		SELECT DonorID, Name, NIC, Email, Password, PhoneNumber, OtherPhoneNumber, DonationFrequency, Occupation, MaritalStatus, Address, DateOfBirth, Location, Gender, BloodType
		FROM dnr.Donor 

		where Name + ' '  LIKE '%' + @KeyW + '%'

		AND
		CASE WHEN @BloodType = '' THEN 1
			 WHEN @BloodType <> '' AND dnr.Donor.BloodType = @BloodType THEN 1
		END = 1

		AND
		CASE WHEN @Gender = '' THEN 1
			 WHEN @Gender <> '' AND dnr.Donor.Gender = @Gender THEN 1
		END = 1

		AND
		CASE WHEN @Location = '' THEN 1
			 WHEN @Location <> '' AND dnr.Donor.Location = @Location THEN 1
		END = 1

		AND
		CASE WHEN @DateOfBirth = '' THEN 1
			 WHEN @DateOfBirth <> '' AND dnr.Donor.DateOfBirth = @DateOfBirth THEN 1
		END = 1
		ORDER BY DateOfBirth
		OFFSET (@PageSize*(@Page-1)) ROWS FETCH NEXT @PageSize ROWS ONLY;
		
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
		RAISERROR ('%s. Script: dnr.Donor_List', 16, 1, @ERROR_MESSAGE);
	END CATCH

End
GO
/****** Object:  StoredProcedure [dnr].[Donor_PasswordEdit]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   Procedure [dnr].[Donor_PasswordEdit]
(
	@APIKey varchar(100),
	@DonorID varchar(50),
	@Password varchar(50),
	@LogUserID varchar(50) = '',
	@RetValue varchar(50) = '' OUT
)
AS
BEGIN
	SET NOCOUNT ON

	BEGIN TRY
		BEGIN TRANSACTION

		-- Check for API Key
		IF NOT EXISTS (SELECT KeyID FROM adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END

		IF @Password <> ''
		BEGIN
			SET @RetValue = @DonorID
			UPDATE [dnr].[Donor] SET
				[Password] = @Password
			WHERE [DonorID] = @DonorID
		END

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		DECLARE @ERROR_MESSAGE varchar(4000) = ERROR_MESSAGE();
		IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
		RAISERROR('%s. Script: dnr.Donor_PasswordEdit', 16, 1, @ERROR_MESSAGE);
	END CATCH
END
GO
/****** Object:  StoredProcedure [dnr].[DonorQuestionnaire_AddEdit]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   Procedure [dnr].[DonorQuestionnaire_AddEdit]
(
	@APIKey varchar(100),
	 
	@QuestionnaireID varchar(50),
	@Q1Prob int,
	@Q1Doctor int,
	@Q1Health int,
	@Q2medCond int,
	@Q3Medication int,
	@Q4Surgery int,
	@Q5Heavywork int,
	@Q6Pregnant int,
	@Q7YellowFever int,
	@Q7TbTyphoid int,
	@Q7Treated int,
	@Q8Immunization int,
	@Q8TattooAcupuncture int,
	@Q8Abroad int,
	@Q8Prison int,
	@Q8Blood int,
	@Q8Malaria int,
	@Q9Dengue int,
	@Q9Fever int,
	@Q9Teeth int,
	@Q10categories int,
	 
	@Q11PartnerCategory int,
	@Q12Symptoms int,
	@LogUserID varchar(50) = '',
	@RetValue varchar(50) = '' OUT
)
AS
BEGIN
	SET NOCOUNT ON

	BEGIN TRY
		BEGIN TRANSACTION

		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END

		IF @QuestionnaireID = ''
		BEGIN
			-- Get next primary key

			DECLARE @PrimaryKey varchar(50)
			EXEC adm.NumberFormat_Get 'dnr.DonorQuestionnaire', 'QuestionnaireID', @PrimaryKey OUT 

			INSERT INTO dnr.DonorQuestionnaire (QuestionnaireID, Q1Prob, Q1Doctor, Q1Health, Q2medCond, Q3Medication, Q4Surgery, Q5Heavywork, Q6Pregnant, Q7YellowFever, Q7TbTyphoid, Q7Treated, Q8Immunization, Q8TattooAcupuncture, Q8Abroad, Q8Prison, Q8Blood, Q8Malaria, Q9Dengue, Q9Fever, Q9Teeth, Q10categories, Q11PartnerCategory, Q12Symptoms)
			VALUES (@PrimaryKey, @Q1Prob, @Q1Doctor, @Q1Health, @Q2medCond, @Q3Medication, @Q4Surgery, @Q5Heavywork, @Q6Pregnant, @Q7YellowFever, @Q7TbTyphoid, @Q7Treated, @Q8Immunization, @Q8TattooAcupuncture, @Q8Abroad, @Q8Prison, @Q8Blood, @Q8Malaria, @Q9Dengue, @Q9Fever, @Q9Teeth, @Q10categories, @Q11PartnerCategory, @Q12Symptoms)

			EXEC adm.NumberFormat_Set 'dnr.DonorQuestionnaire'

			SET @RetValue = @PrimaryKey

		END
		 
		
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		DECLARE @ERROR_MESSAGE varchar(4000) = ERROR_MESSAGE();
		IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
		RAISERROR ('%s. Script: dnr.DonorQuestionnaire_AddEdit', 16, 1, @ERROR_MESSAGE);
	END CATCH
END
GO
/****** Object:  StoredProcedure [dnr].[DonorQuestionnaire_Get]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   Procedure [dnr].[DonorQuestionnaire_Get]
(
	@APIKey varchar(100),
	@ID varchar(50)
)
AS
BEGIN
	SET NOCOUNT ON
	
	BEGIN TRY
		
		-- Check for API Key
		IF NOT EXISTS (SELECT KeyID FROM adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END
		
		SELECT 
			dnr.DonorQuestionnaire.QuestionnaireID,
			Q1Prob,
			Q1Doctor,
			Q1Health,
			Q2medCond,
			Q3Medication,
			Q4Surgery,
			Q5Heavywork,
			Q6Pregnant,
			Q7YellowFever,
			Q7TbTyphoid,
			Q7Treated,
			Q8Immunization,
			Q8TattooAcupuncture,
			Q8Abroad,
			Q8Prison,
			Q8Blood,
			Q8Malaria,
			Q9Dengue,
			Q9Fever,
			Q9Teeth,
			Q10categories,

			Q11PartnerCategory,
			Q12Symptoms,
			dnr.DonarDonation.DonotionID
		FROM dnr.DonarDonation
		inner join dnr.DonorQuestionnaire on dnr.DonarDonation.QuestionnaireID = dnr.DonorQuestionnaire.QuestionnaireID
		WHERE dnr.DonarDonation.DonotionID = @ID

	END TRY
	BEGIN CATCH
		DECLARE @ERROR_MESSAGE varchar(4000) = ERROR_MESSAGE();
		RAISERROR('%s. Script: dnr.DonorQuestionnaire_Get', 16, 1, @ERROR_MESSAGE);
	END CATCH
END
GO
/****** Object:  StoredProcedure [dnr].[TestRecord_AddEdit]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   Procedure [dnr].[TestRecord_AddEdit]
(
	@APIKey varchar(100),
	@TestID varchar(50),
	@DonationID varchar(50),
	@HemoglobinLevel decimal(5,2),
	@PlateletLevel decimal(5,2),
	@HIVTestResult varchar(10),
	@WhiteBloodCellCount int,
	@DiseaseOrVirus varchar(50) = NULL,
	@TestRecordPdfFile varchar(255) = NULL,
	@LogUserID varchar(50) = '',
	@RetValue varchar(50) = '' OUT
)
AS
BEGIN
SET NOCOUNT ON
BEGIN TRY
	BEGIN TRANSACTION

	IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
	BEGIN
		;THROW 50000, 'Invalid API Key', 1;
	END

	IF @TestID = ''
	BEGIN
		-- Get next primary key
		DECLARE @PrimaryKey varchar(50)
		EXEC adm.NumberFormat_Get 'dnr.TestRecord', 'TestID', @PrimaryKey OUT 

		INSERT INTO dnr.TestRecord (TestID, DonationID, HemoglobinLevel, PlateletLevel, HIVTestResult, WhiteBloodCellCount, DiseaseOrVirus, TestRecordPdfFile)
		VALUES (@PrimaryKey, @DonationID, @HemoglobinLevel, @PlateletLevel, @HIVTestResult, @WhiteBloodCellCount, @DiseaseOrVirus, @TestRecordPdfFile)

		EXEC adm.NumberFormat_Set 'dnr.TestRecord'

		SET @RetValue = @PrimaryKey

	END
	ELSE
	BEGIN
		UPDATE dnr.TestRecord SET 
			DonationID = @DonationID, 
			HemoglobinLevel = @HemoglobinLevel, 
			PlateletLevel = @PlateletLevel, 
			HIVTestResult = @HIVTestResult, 
			WhiteBloodCellCount = @WhiteBloodCellCount, 
			DiseaseOrVirus = @DiseaseOrVirus, 
			TestRecordPdfFile = @TestRecordPdfFile
		WHERE TestID = @TestID

		SET @RetValue = @TestID
	END
	
	COMMIT TRANSACTION
END TRY
BEGIN CATCH
	DECLARE @ERROR_MESSAGE varchar(4000) = ERROR_MESSAGE();
	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
	RAISERROR ('%s. Script: dnr.TestRecord_AddEdit', 16, 1, @ERROR_MESSAGE);
END CATCH
End 
GO
/****** Object:  StoredProcedure [dnr].[TestRecord_Count]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   Procedure [dnr].[TestRecord_Count]
(
	@APIKey	varchar(100),
				   
	@KeyW varchar(50) = '',
	@DonorID VARCHAR(50) = '',
	@NIC VARCHAR(50) = '',
	@DonationDate datetime2(7) = '',
	@BloodBankCentreID VARCHAR(50) = '',
	@Status VARCHAR(50) = ''
)	
As
Begin
	SET NOCOUNT ON
	BEGIN TRY
		
		-- Check for API Key
		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END


		SELECT COUNT(*) AS RecordCount
		FROM dnr.TestRecord 
		inner join dnr.DonarDonation on dnr.TestRecord.DonationID = dnr.DonarDonation.DonotionID
		inner join dnr.Donor on dnr.DonarDonation.DonorID = dnr.Donor.DonorID
		where Name + ' '  LIKE '%' + @KeyW + '%'

		AND
		CASE WHEN @DonorID = '' THEN 1
			 WHEN @DonorID <> '' AND dnr.DonarDonation.DonorID = @DonorID THEN 1
		END = 1

		AND CASE
       WHEN @DonationDate = '' THEN 1
       WHEN @DonationDate <> '' AND CONVERT(VARCHAR(10), dnr.DonarDonation.DonationDate, 120) = @DonationDate THEN 1
		END = 1

		AND
		CASE WHEN @BloodBankCentreID = '' THEN 1
			 WHEN @BloodBankCentreID <> '' AND dnr.DonarDonation.BloodBankCentreID = @BloodBankCentreID THEN 1
		END = 1

		AND
		CASE WHEN @NIC = '' THEN 1
			 WHEN @NIC <> '' AND dnr.Donor.NIC = @NIC THEN 1
		END = 1

		AND
		CASE WHEN @Status = '' THEN 1
			 WHEN @Status <> '' AND dnr.DonarDonation.Status = @Status THEN 1
		END = 1

		
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
		RAISERROR ('%s. Script: dnr.TestRecord_Count', 16, 1, @ERROR_MESSAGE);
	END CATCH

End
GO
/****** Object:  StoredProcedure [dnr].[TestRecord_Get]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   Procedure [dnr].[TestRecord_Get]
(
	@APIKey	varchar(100),
				   
	@ID varchar(50) = ''
)	
As
Begin
	SET NOCOUNT ON
	BEGIN TRY
		
		-- Check for API Key
		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END


		SELECT TestID,DonationID,HemoglobinLevel,PlateletLevel,HIVTestResult,WhiteBloodCellCount,DiseaseOrVirus,TestRecordPdfFile
		FROM dnr.TestRecord

		
		where DonationID = @ID

		
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
		RAISERROR ('%s. Script: dnr.TestRecord_List', 16, 1, @ERROR_MESSAGE);
	END CATCH

End
GO
/****** Object:  StoredProcedure [dnr].[TestRecord_List]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   Procedure [dnr].[TestRecord_List]
(
	 
	@APIKey	varchar(100),
				   
	@KeyW varchar(50) = '',
	@DonorID VARCHAR(50) = '',
	@NIC VARCHAR(50) = '',
	@DonationDate Datetime2(7) = '',
	@BloodBankCentreID VARCHAR(50) = '',
	@Status VARCHAR(50) = '',			   
	@Page int = 0,
	@PageSize int = 99999
)	
 	
As
Begin
	SET NOCOUNT ON
	BEGIN TRY
		
		-- Check for API Key
		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END

			-- Set default value page and page size
		IF @Page = 0 
		BEGIN
			SET @PageSize = 99999
			SET @Page = 1
		END

		SELECT TestID,dnr.TestRecord.DonationID,HemoglobinLevel,PlateletLevel,HIVTestResult,WhiteBloodCellCount,DiseaseOrVirus,TestRecordPdfFile,DonationDate
		FROM dnr.TestRecord 
		inner join dnr.DonarDonation on dnr.TestRecord.DonationID = dnr.DonarDonation.DonotionID
		inner join dnr.Donor on dnr.DonarDonation.DonorID = dnr.Donor.DonorID


		where Name + ' '  LIKE '%' + @KeyW + '%'

		AND
		CASE WHEN @DonorID = '' THEN 1
			 WHEN @DonorID <> '' AND dnr.DonarDonation.DonorID = @DonorID THEN 1
		END = 1

		AND CASE
       WHEN @DonationDate = '' THEN 1
       WHEN @DonationDate <> '' AND CONVERT(VARCHAR(10), dnr.DonarDonation.DonationDate, 120) = @DonationDate THEN 1
		END = 1
		AND
		CASE WHEN @BloodBankCentreID = '' THEN 1
			 WHEN @BloodBankCentreID <> '' AND dnr.DonarDonation.BloodBankCentreID = @BloodBankCentreID THEN 1
		END = 1

		AND
		CASE WHEN @NIC = '' THEN 1
			 WHEN @NIC <> '' AND dnr.Donor.NIC = @NIC THEN 1
		END = 1

		AND
		CASE WHEN @Status = '' THEN 1
			 WHEN @Status <> '' AND dnr.DonarDonation.Status = @Status THEN 1
		END = 1

		ORDER BY DonationDate asc
		OFFSET (@PageSize*(@Page-1)) ROWS FETCH NEXT @PageSize ROWS ONLY;

		
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
		RAISERROR ('%s. Script: dnr.TestRecord_List', 16, 1, @ERROR_MESSAGE);
	END CATCH

End
GO
/****** Object:  StoredProcedure [dsh].[DonationProgression]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE    Procedure [dsh].[DonationProgression]
(	
	@APIKey	varchar(100),
	@Year varchar(50)
	
)
As
Begin
	SET NOCOUNT ON

	BEGIN TRY
		BEGIN TRANSACTION

		-- Check for API Key
		IF NOT EXISTS (select KeyID from adm.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END

		SELECT 
			MONTH(DonationDate) as Month, 
			Status, 
			COUNT(*) as Count
		FROM 
			dnr.DonarDonation 
		WHERE 
			YEAR(DonationDate) = '2023'
		GROUP BY 
			MONTH(DonationDate), Status
		
		

	
	COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
        IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
        RAISERROR ('%s in "DonationProgression"', 16, 1, @ERROR_MESSAGE);
	END CATCH

End
GO
/****** Object:  StoredProcedure [dsh].[Emp_Summary]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create    Procedure  [dsh].[Emp_Summary]
(
	@APIKey	varchar(100)
	
)
As
Begin
	SET NOCOUNT ON

	BEGIN TRY
		BEGIN TRANSACTION

		-- Check for API Key
		IF NOT EXISTS (select KeyID from syst.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END

		DECLARE @MM int
		DECLARE @YY int
		DECLARE @StartDate Datetime

		Select @MM = 1
		Select @YY = DATEPART(YEAR,getDate())
		SET @StartDate = CAST(CAST((@YY) AS varchar) + '-' + CAST(@MM AS varchar) + '-' + CAST(1 AS varchar) AS DATETIME)

		DECLARE @EmployeeLeft int = 0
		select @EmployeeLeft = COUNT(TerminationID) from emp.Termination WHERE TerminatedDate > @StartDate

		DECLARE @TotalEmployeeCount int = 0
		select @TotalEmployeeCount = COUNT(PayHistoryID) from pay.PayHistory WHERE SUBSTRING(Period,2,4) =  @YY AND PayItemID = 'C-NET'

		DECLARE @TotalPeriodCount int = 0
		select @TotalPeriodCount = COUNT(DISTINCT(Period)) from pay.PayHistory WHERE SUBSTRING(Period,2,4) =  @YY

		DECLARE @TurnOver int = 0
		IF @TotalPeriodCount > 1
		BEGIN
			SET @TurnOver = @EmployeeLeft * 100 / (@TotalEmployeeCount/@TotalPeriodCount)
		END


		select 
		@TurnOver as 'TurnOver',
		(select COUNT(EmployeeID) from emp.EmployeeJobDet WHERE EmployeeStatus = 'A') as 'ActiveEmp',
		(select COUNT(EmployeeID) from emp.EmployeeJobDet WHERE EmployeeStatus = 'I') as 'InactiveEmp',
		(select COUNT(EmployeeID) from emp.EmployeeJobDet WHERE EmployeeStatus = 'R') as 'ResignedEmp',
		(select COUNT(EmployeeID) from emp.EmployeeJobDet WHERE EmployeeStatus = 'T') as 'TerminatedEmp',

		(select COUNT(EmployeeID) from emp.EmployeeJobDet WHERE EmployeeType = 'C' AND EmployeeStatus = 'A') as 'Confirmed',
		(select COUNT(EmployeeID) from emp.EmployeeJobDet WHERE EmployeeType = 'P' AND EmployeeStatus = 'A') as 'OnProbation',
		(select COUNT(EmployeeID) from emp.EmployeeJobDet WHERE EmployeeType = 'N' AND EmployeeStatus = 'A') as 'Contract',
		(select COUNT(EmployeeID) from emp.EmployeeJobDet WHERE EmployeeType = 'T' AND EmployeeStatus = 'A') as 'Trainee',

		(select COUNT(emp.EmployeeJobDet.EmployeeID) from emp.EmployeePaySet 
			INNER JOIN emp.EmployeeJobDet ON emp.EmployeeJobDet.EmployeeID = emp.EmployeePaySet.EmployeeID
			INNER JOIN emp.Grade ON emp.Grade.GradeID = emp.EmployeePaySet.GradeID
		 WHERE emp.Grade.PolicyAct = 'S' AND EmployeeStatus = 'A') as 'Staff',

		 (select COUNT(emp.EmployeeJobDet.EmployeeID) from emp.EmployeePaySet 
			INNER JOIN emp.EmployeeJobDet ON emp.EmployeeJobDet.EmployeeID = emp.EmployeePaySet.EmployeeID
			INNER JOIN emp.Grade ON emp.Grade.GradeID = emp.EmployeePaySet.GradeID
		 WHERE emp.Grade.PolicyAct = 'N' AND EmployeeStatus = 'A') as 'NonStaff',

		(select COUNT(ApplicationID) from lev.Application WHERE AppStatus = 'P') as 'PendingLeave',

		(select ISNULL(SUM(NoOfDays),0) from lev.Records WHERE LeaveCode = 'AL' AND LeaveDate >=  dbo.GetEffStartDate(dbo.getEmployeePeriod(EmployeeID)) AND LeaveDate <=  dbo.GetEffEndDate(dbo.getEmployeePeriod(EmployeeID))) as 'AnnualLeave',
		(select ISNULL(SUM(NoOfDays),0) from lev.Records WHERE LeaveCode = 'CL' AND LeaveDate >=  dbo.GetEffStartDate(dbo.getEmployeePeriod(EmployeeID)) AND LeaveDate <=  dbo.GetEffEndDate(dbo.getEmployeePeriod(EmployeeID))) as 'CasualLeave',
		(select ISNULL(SUM(NoOfDays),0) from lev.Records WHERE LeaveCode = 'ML' AND LeaveDate >=  dbo.GetEffStartDate(dbo.getEmployeePeriod(EmployeeID)) AND LeaveDate <=  dbo.GetEffEndDate(dbo.getEmployeePeriod(EmployeeID))) as 'MaternityLeave',
		(select ISNULL(SUM(NoOfDays),0) from lev.Records WHERE LeaveCode = 'PL' AND LeaveDate >=  dbo.GetEffStartDate(dbo.getEmployeePeriod(EmployeeID)) AND LeaveDate <=  dbo.GetEffEndDate(dbo.getEmployeePeriod(EmployeeID))) as 'CompassionateLeave',
		(select ISNULL(SUM(NoOfDays),0) from lev.Records WHERE LeaveCode = 'SL' AND LeaveDate >=  dbo.GetEffStartDate(dbo.getEmployeePeriod(EmployeeID)) AND LeaveDate <=  dbo.GetEffEndDate(dbo.getEmployeePeriod(EmployeeID))) as 'SickLeave',
		(select ISNULL(SUM(NoOfDays),0) from lev.Records WHERE LeaveCode = 'UL' AND LeaveDate >=  dbo.GetEffStartDate(dbo.getEmployeePeriod(EmployeeID)) AND LeaveDate <=  dbo.GetEffEndDate(dbo.getEmployeePeriod(EmployeeID))) as 'UnpaidLeave'

		--(select COUNT(ApplicationID) from ln_tbl_Application WHERE AppStatus = 'P') as 'PendingLoanCount',
		--(select ISNULL(SUM(LoanAmount),0) from ln_tbl_Application WHERE AppStatus = 'P') as 'PendingLoanValue',
		--(select COUNT(LoanID) from ln_tbl_Loan WHERE LoanStatus = 'R') as 'RunningLoanCount',
		--(select ISNULL(SUM(LoanAmount),0) from ln_tbl_Loan WHERE LoanStatus = 'R') as 'RunningLoanValue',
		--(select COUNT(LoanID) from ln_tbl_Loan WHERE LoanStatus = 'P') as 'PausedLoanCount',
		--(select ISNULL(SUM(LoanAmount),0) from ln_tbl_Loan WHERE LoanStatus = 'P') as 'PausedLoanValue',
		--(select ISNULL(SUM(Installment),0) from ln_tbl_Schedule WHERE PaidPeriod = '') as 'LoanBalance'
	
	COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
        IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
        RAISERROR ('%s in "Emp_Summary"', 16, 1, @ERROR_MESSAGE);
	END CATCH

End
GO
/****** Object:  StoredProcedure [dsh].[PayrollProgression]    Script Date: 7/26/2023 10:54:30 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create    Procedure  [dsh].[PayrollProgression]
(	@APIKey	varchar(100),
	@Period varchar(50)
	
)
As
Begin
	SET NOCOUNT ON

	BEGIN TRY
		BEGIN TRANSACTION

		-- Check for API Key
		IF NOT EXISTS (select KeyID from syst.APIKey WHERE KeyValue = @APIKey AND ActiveStatus = 'A')
		BEGIN
			;THROW 50000, 'Invalid API Key', 1;
		END

		select TOP 18 Period, dbo.GetPeriodName(Period) as PeriodName,
		isnull((select ROUND(SUM(Unit * Rate),2) from pay.PayHistory WHERE Period = pay.Schedule.Period AND PayItemID = 'D-Basic' OR PayItemID = 'D-Rated'),0) as BasicSal,
		isnull((select ROUND(SUM(Unit * Rate),2) from pay.PayHistory WHERE Period = pay.Schedule.Period AND PayItemID = 'N-Gross'),0) as Gross,
		isnull((select ROUND(SUM(Unit * Rate),2) from pay.PayHistory WHERE Period = pay.Schedule.Period AND PayItemID = 'C-Total'),0) as Ded,
		isnull((select ROUND(SUM(Unit * Rate),2) from pay.PayHistory WHERE Period = pay.Schedule.Period AND PayItemID = 'C-Net'),0) as NET

		from pay.Schedule
		
		WHERE LEFT(Period,1) = @Period 

		GROUP BY Period
		ORDER BY Period DESC
		
		

	
	COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
        DECLARE @ERROR_MESSAGE varchar(4000)= ERROR_MESSAGE();
        IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
        RAISERROR ('%s in "PayrollProgression"', 16, 1, @ERROR_MESSAGE);
	END CATCH

End
GO
USE [master]
GO
ALTER DATABASE [testempower] SET  READ_WRITE 
GO
